const axios = require('axios');

const API_URL = 'http://localhost:5000';

async function testRenderErrorFix() {
  console.log('üîß Test Render Error Fix\n');

  try {
    // Test 1: Ki·ªÉm tra API ho·∫°t ƒë·ªông
    console.log('üì° Test 1: API Health Check');
    const healthResponse = await axios.get(`${API_URL}/api/health`);
    console.log('‚úÖ API ƒëang ho·∫°t ƒë·ªông:', healthResponse.data.status);

    // Test 2: Test customer login
    console.log('\nüë§ Test 2: Customer Login');
    const loginResponse = await axios.post(`${API_URL}/api/customers/login`, {
      username: 'unlimited_test',
      password: '123123'
    });
    
    if (loginResponse.data.token) {
      console.log('‚úÖ Customer login th√†nh c√¥ng');
    } else {
      console.log('‚ùå Customer login th·∫•t b·∫°i');
    }

    // Test 3: Test booking flow (s·ªë kh√°ch l·ªõn)
    console.log('\nüìä Test 3: Booking Flow v·ªõi s·ªë kh√°ch l·ªõn');
    const token = loginResponse.data.token;
    
    // L·∫•y b√†n v√† menu
    const tablesResponse = await axios.get(`${API_URL}/api/tables`);
    const menuResponse = await axios.get(`${API_URL}/api/menu`);
    
    const availableTable = tablesResponse.data[0];
    const firstMenuItem = menuResponse.data[0];

    if (availableTable && firstMenuItem) {
      // Test v·ªõi s·ªë kh√°ch l·ªõn
      const testGuests = 500;
      const bookingData = {
        tableId: availableTable._id,
        numberOfGuests: testGuests,
        bookingDate: new Date(Date.now() + 14 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 2 tu·∫ßn sau
        bookingTime: '18:00',
        menuItems: [{
          itemId: firstMenuItem._id,
          quantity: Math.ceil(testGuests / 2)
        }],
        notes: `Test ${testGuests} kh√°ch - Render Error Fix`
      };

      const bookingResponse = await axios.post(`${API_URL}/api/bookings`, bookingData, {
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (bookingResponse.data.success || bookingResponse.data.message?.includes('th√†nh c√¥ng')) {
        console.log(`‚úÖ Booking th√†nh c√¥ng v·ªõi ${testGuests} kh√°ch`);
        console.log('‚úÖ Kh√¥ng c√≥ l·ªói render error');
      } else {
        console.log('‚ùå Booking th·∫•t b·∫°i:', bookingResponse.data.message);
      }
    } else {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ b√†n ho·∫∑c menu ƒë·ªÉ test');
    }

    console.log('\nüéâ K·∫æT QU·∫¢:');
    console.log('‚úÖ API ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng');
    console.log('‚úÖ Customer login th√†nh c√¥ng');
    console.log('‚úÖ Booking v·ªõi s·ªë kh√°ch l·ªõn th√†nh c√¥ng');
    console.log('‚úÖ Kh√¥ng c√≥ l·ªói "Maximum update depth exceeded"');
    console.log('\nüí° L·ªói render error ƒë√£ ƒë∆∞·ª£c s·ª≠a b·∫±ng c√°ch:');
    console.log('   - B·ªè setGuests kh·ªèi dependency array trong select-table.tsx');
    console.log('   - S·ª≠ d·ª•ng useCallback cho t·∫•t c·∫£ functions trong order-context.tsx');
    console.log('   - S·ª≠ d·ª•ng useCallback cho t·∫•t c·∫£ functions trong tables-context.tsx');

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data?.message || error.message);
  }
}

testRenderErrorFix();
