import { useState, useEffect } from 'react';
import { StyleSheet, TouchableOpacity, View, Alert, ScrollView, TextInput, Modal, Image } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { useRouter } from 'expo-router';
import { ThemedText } from '@/components/themed-text';
import { ThemedView } from '@/components/themed-view';
import { useOrder } from '@/components/order-context';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { tryApiCall } from '@/constants/api';

export default function BookingConfirmScreen() {
  const router = useRouter();
  const { state, clearOrder } = useOrder();
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [user, setUser] = useState(null);
  const [showQRPayment, setShowQRPayment] = useState(false);
  const [bookingData, setBookingData] = useState(null);
  const [qrCode, setQrCode] = useState('');
  const [qrLoading, setQrLoading] = useState(false);
  // S·ª≠ d·ª•ng depositAmount t·ª´ context thay v√¨ state local
  const depositAmount = state.depositAmount?.toString() || '';
  // Kh√¥ng c·∫ßn modal ch·ªçn c·ªçc n·ªØa v√¨ ƒë√£ ch·ªçn ·ªü m√†n h√¨nh tr∆∞·ªõc

  useEffect(() => {
    loadUser();
  }, []);

  // T·∫°o QR code khi hi·ªÉn th·ªã thanh to√°n
  useEffect(() => {
    if (showQRPayment && bookingData) {
      generateQRCode();
    }
  }, [showQRPayment, bookingData]);

  const loadUser = async () => {
    try {
      const userData = await AsyncStorage.getItem('userInfo');
      if (userData) {
        setUser(JSON.parse(userData));
      }
    } catch (error) {
      console.error('Error loading user:', error);
    }
  };

  // T·∫°o QR code thanh to√°n
  const generateQRCode = async () => {
    if (!bookingData) return;
    
    try {
      setQrLoading(true);
      const result = await tryApiCall('/api/payment/generate-qr', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          accountNumber: '2246811357',
          accountName: 'DANG GIA HY',
          bankCode: '970407',
          amount: parseInt(bookingData.depositAmount),
          description: `Coc ban ${bookingData.tableName}`
        })
      });

      if (result.success) {
        setQrCode(result.data.qrCode);
        console.log('‚úÖ QR code ƒë√£ ƒë∆∞·ª£c t·∫°o');
      } else {
        console.error('‚ùå L·ªói t·∫°o QR code:', result.error);
        Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫°o QR code thanh to√°n');
      }
    } catch (error) {
      console.error('Error generating QR code:', error);
      Alert.alert('L·ªói', 'L·ªói k·∫øt n·ªëi khi t·∫°o QR code');
    } finally {
      setQrLoading(false);
    }
  };

  // X√°c nh·∫≠n thanh to√°n c·ªçc
  const confirmDepositPayment = async () => {
    if (!bookingData) return;
    
    try {
      const token = await AsyncStorage.getItem('userToken');
      const result = await tryApiCall(`/api/bookings/${bookingData.bookingId}/confirm-deposit`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        }
      });

      if (result.success) {
        Alert.alert(
          'üéâ TH√ÄNH C√îNG!', 
          `ƒê√£ c·ªçc ${parseInt(bookingData.depositAmount).toLocaleString()}ƒë cho b√†n ${bookingData.tableName}.\n\n‚úÖ C·ªçc ngay th√†nh c√¥ng!`,
          [
            {
              text: 'V·ªÅ trang ch·ªß',
              onPress: () => {
                clearOrder();
                router.replace('/');
              }
            }
          ]
        );
      } else {
        Alert.alert('L·ªói', result.error || 'X√°c nh·∫≠n c·ªçc th·∫•t b·∫°i');
      }
    } catch (error) {
      console.error('Error confirming deposit:', error);
      Alert.alert('L·ªói', 'L·ªói k·∫øt n·ªëi khi x√°c nh·∫≠n c·ªçc');
    }
  };

  // H·ªßy thanh to√°n
  const cancelPayment = () => {
    setShowQRPayment(false);
    setQrCode('');
    setBookingData(null);
  };


  const calculateTotal = () => {
    return state.items.reduce((total, item) => total + (item.price * item.quantity), 0);
  };

  const handleConfirmBooking = async () => {
    if (!user) {
      Alert.alert('L·ªói', 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      return;
    }

    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if (!state.selectedTable?.id) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn b√†n');
      return;
    }

    if (!state.numberOfGuests || state.numberOfGuests <= 0) {
      Alert.alert('L·ªói', 'Vui l√≤ng nh·∫≠p s·ªë ng∆∞·ªùi');
      return;
    }

    if (!state.bookingInfo?.date || !state.bookingInfo?.time) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn ng√†y v√† gi·ªù');
      return;
    }

    if (!state.items || state.items.length === 0) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn m√≥n');
      return;
    }

    // B·∫ÆT BU·ªòC PH·∫¢I CH·ªåN C·ªåC
    if (!depositAmount || parseInt(depositAmount) <= 0) {
      Alert.alert('L·ªói', 'Vui l√≤ng ch·ªçn s·ªë ti·ªÅn c·ªçc (t·ªëi thi·ªÉu 50,000ƒë)');
      return;
    }

    if (parseInt(depositAmount) < 50000) {
      Alert.alert('L·ªói', 'S·ªë ti·ªÅn c·ªçc t·ªëi thi·ªÉu l√† 50,000ƒë');
      return;
    }

    try {
      setIsSubmitting(true);

      const token = await AsyncStorage.getItem('userToken');
      if (!token) {
        Alert.alert('L·ªói', 'Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
        return;
      }

      // Chu·∫©n b·ªã d·ªØ li·ªáu booking
      const bookingData = {
        tableId: state.selectedTable?.id,
        numberOfGuests: state.numberOfGuests,
        bookingDate: state.bookingInfo?.date,
        bookingTime: state.bookingInfo?.time,
        menuItems: state.items.map(item => ({
          itemId: item.id,
          quantity: item.quantity
        })),
        notes: '',
        depositAmount: depositAmount ? parseInt(depositAmount) : 0
      };

      console.log('Booking data being sent:', bookingData);

      const result = await tryApiCall('/api/bookings', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(bookingData)
      });

      if (result.success) {
        console.log('Booking successful with URL:', result.url);
        
        // N·∫øu c√≥ c·ªçc, hi·ªÉn th·ªã QR thanh to√°n ngay trong m√†n h√¨nh n√†y
        if (depositAmount && parseInt(depositAmount) > 0) {
          // Hi·ªÉn th·ªã QR thanh to√°n ngay l·∫≠p t·ª©c, gi·ªëng Web Admin
          setShowQRPayment(true);
          setBookingData({
            bookingId: result.data?.booking?.id || result.data?.bookingId || result.data?._id,
            tableId: state.selectedTable?.id,
            depositAmount: depositAmount,
            tableName: state.selectedTable?.name
          });
        } else {
          // Kh√¥ng c·ªçc, th√¥ng b√°o b√¨nh th∆∞·ªùng
          Alert.alert(
            'ƒê·∫∂T TH√ÄNH C√îNG (CH·ªú X√ÅC NH·∫¨N)', 
            `B√†n ${state.selectedTable?.name} ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t cho ${state.numberOfGuests} ng∆∞·ªùi v√†o ${state.bookingInfo?.date} l√∫c ${state.bookingInfo?.time}.\n\n‚úÖ C·ªçc ngay ƒë·ªÉ gi·ªØ b√†n.\n‚è∞ Nh√¢n vi√™n s·∫Ω x√°c nh·∫≠n trong v√≤ng 5 ph√∫t.`,
            [
              {
                text: 'V·ªÅ trang ch·ªß',
                onPress: () => {
                  clearOrder();
                  router.replace('/');
                }
              }
            ]
          );
        }
      } else {
        console.error('Booking failed:', result.error);
        Alert.alert('L·ªói ƒë·∫∑t b√†n', result.error || 'C√≥ l·ªói x·∫£y ra');
      }
    } catch (error) {
      console.error('Booking error:', error);
      Alert.alert('L·ªói k·∫øt n·ªëi', 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server');
    } finally {
      setIsSubmitting(false);
    }
  };

  const formatDate = (dateString) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('vi-VN', {
      weekday: 'long',
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    });
  };

  // depositOptions ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang m√†n h√¨nh select-deposit

  // C√°c h√†m n√†y kh√¥ng c·∫ßn n·ªØa v√¨ s·ª≠ d·ª•ng context

  return (
    <ThemedView style={styles.container}>
      <ScrollView showsVerticalScrollIndicator={false}>
        <View style={styles.header}>
          <ThemedText type="title">X√°c nh·∫≠n ƒë·∫∑t b√†n</ThemedText>
          <ThemedText>Ki·ªÉm tra th√¥ng tin tr∆∞·ªõc khi x√°c nh·∫≠n</ThemedText>
        </View>

        {/* Th√¥ng tin b√†n */}
        <View style={styles.section}>
          <ThemedText type="defaultSemiBold" style={styles.sectionTitle}>Th√¥ng tin b√†n</ThemedText>
          <View style={styles.infoCard}>
            <View style={styles.infoRow}>
              <ThemedText style={styles.infoLabel}>B√†n:</ThemedText>
              <ThemedText style={styles.infoValue}>{state.selectedTable?.name}</ThemedText>
            </View>
            <View style={styles.infoRow}>
              <ThemedText style={styles.infoLabel}>S·ªë ng∆∞·ªùi:</ThemedText>
              <ThemedText style={styles.infoValue}>{state.numberOfGuests} ng∆∞·ªùi</ThemedText>
            </View>
            <View style={styles.infoRow}>
              <ThemedText style={styles.infoLabel}>Ng√†y:</ThemedText>
              <ThemedText style={styles.infoValue}>{formatDate(state.bookingInfo?.date)}</ThemedText>
            </View>
            <View style={styles.infoRow}>
              <ThemedText style={styles.infoLabel}>Gi·ªù:</ThemedText>
              <ThemedText style={styles.infoValue}>{state.bookingInfo?.time}</ThemedText>
            </View>
          </View>
        </View>

        {/* Danh s√°ch m√≥n */}
        <View style={styles.section}>
          <ThemedText type="defaultSemiBold" style={styles.sectionTitle}>M√≥n ƒë√£ ch·ªçn</ThemedText>
          <View style={styles.menuCard}>
            {state.items.map((item, index) => (
              <View key={index} style={styles.menuItem}>
                <View style={styles.menuItemInfo}>
                  <ThemedText style={styles.menuItemName}>{item.name}</ThemedText>
                </View>
                <View style={styles.menuItemQuantity}>
                  <ThemedText style={styles.menuItemQuantityText}>x{item.quantity}</ThemedText>
                </View>
                <View style={styles.menuItemPrice}>
                  <ThemedText style={styles.menuItemPriceText}>
                    {(item.price * item.quantity).toLocaleString()}ƒë
                  </ThemedText>
                </View>
              </View>
            ))}
          </View>
        </View>

        {/* S·ªë ti·ªÅn c·ªçc ƒë√£ ch·ªçn */}
        <View style={styles.section}>
          <ThemedText type="defaultSemiBold" style={styles.sectionTitle}>üí∞ S·ªë ti·ªÅn c·ªçc ƒë√£ ch·ªçn</ThemedText>
          <View style={styles.depositCard}>
            <View style={styles.depositDisplay}>
              <ThemedText style={styles.depositDisplayText}>
                {state.depositAmount ? `${parseInt(state.depositAmount).toLocaleString()}ƒë` : 'Ch∆∞a ch·ªçn c·ªçc'}
              </ThemedText>
            </View>
            <ThemedText style={styles.depositNote}>
              üí° S·ªë ti·ªÅn c·ªçc s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong m·ª•c thanh to√°n b√†n c·ªßa qu·∫£n l√Ω
            </ThemedText>
          </View>
        </View>

        {/* T·ªïng ti·ªÅn */}
        <View style={styles.totalSection}>
          <View style={styles.totalRow}>
            <ThemedText type="defaultSemiBold" style={styles.totalLabel}>T·ªïng c·ªông:</ThemedText>
            <ThemedText type="defaultSemiBold" style={styles.totalAmount}>
              {calculateTotal().toLocaleString()}ƒë
            </ThemedText>
          </View>
          {depositAmount && parseInt(depositAmount) > 0 && (
            <View style={styles.totalRow}>
              <ThemedText type="defaultSemiBold" style={styles.depositLabel}>S·ªë ti·ªÅn c·ªçc:</ThemedText>
              <ThemedText type="defaultSemiBold" style={styles.depositAmount}>
                {parseInt(depositAmount).toLocaleString()}ƒë
              </ThemedText>
            </View>
          )}
        </View>

        {/* Th√¥ng b√°o */}
        <View style={styles.noticeCard}>
          <ThemedText style={styles.noticeText}>
            üí∞ C·ªåC NGAY ƒë·ªÉ gi·ªØ b√†n v√† ho√†n t·∫•t ƒë·∫∑t b√†n.
          </ThemedText>
        </View>
      </ScrollView>

      {/* N√∫t x√°c nh·∫≠n */}
      <View style={styles.buttonContainer}>
        <TouchableOpacity 
          onPress={handleConfirmBooking} 
          style={[styles.confirmButton, isSubmitting && styles.buttonDisabled]}
          disabled={isSubmitting}
        >
          <ThemedText type="defaultSemiBold" style={styles.confirmButtonText}>
            {isSubmitting ? 'ƒêang x·ª≠ l√Ω...' : 'X√°c nh·∫≠n ƒë·∫∑t b√†n'}
          </ThemedText>
        </TouchableOpacity>
      </View>

      {/* QR Payment Modal - Hi·ªÉn th·ªã ngay khi c√≥ c·ªçc */}
      {showQRPayment && (
        <View style={styles.qrPaymentOverlay}>
          <View style={styles.qrPaymentModal}>
            <View style={styles.qrPaymentHeader}>
              <ThemedText type="title" style={styles.qrPaymentTitle}>
                üí≥ THANH TO√ÅN C·ªåC
              </ThemedText>
              <TouchableOpacity onPress={cancelPayment} style={styles.closeButton}>
                <Ionicons name="close" size={24} color="#666" />
              </TouchableOpacity>
            </View>

            <View style={styles.qrPaymentContent}>
              <ThemedText style={styles.qrPaymentSubtitle}>
                Qu√©t m√£ QR ƒë·ªÉ thanh to√°n c·ªçc {parseInt(bookingData?.depositAmount || 0).toLocaleString()}ƒë
              </ThemedText>

              {qrLoading ? (
                <View style={styles.qrLoadingContainer}>
                  <View style={styles.qrSpinner} />
                  <ThemedText style={styles.qrLoadingText}>ƒêang t·∫°o QR code...</ThemedText>
                </View>
              ) : qrCode ? (
                <View style={styles.qrCodeContainer}>
                  <Image 
                    source={{ uri: qrCode }} 
                    style={styles.qrCodeImage}
                    resizeMode="contain"
                    onError={(error) => {
                      console.error('QR Code load error:', error);
                      Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ t·∫£i QR code');
                    }}
                  />
                </View>
              ) : (
                <View style={styles.qrErrorContainer}>
                  <ThemedText style={styles.qrErrorText}>Kh√¥ng th·ªÉ t·∫°o QR code</ThemedText>
                </View>
              )}

              <View style={styles.paymentInfo}>
                <ThemedText style={styles.paymentInfoTitle}>Th√¥ng tin chuy·ªÉn kho·∫£n:</ThemedText>
                <View style={styles.paymentInfoRow}>
                  <ThemedText style={styles.paymentInfoLabel}>T√†i kho·∫£n:</ThemedText>
                  <ThemedText style={styles.paymentInfoValue}>DANG GIA HY</ThemedText>
                </View>
                <View style={styles.paymentInfoRow}>
                  <ThemedText style={styles.paymentInfoLabel}>S·ªë TK:</ThemedText>
                  <ThemedText style={styles.paymentInfoValue}>2246811357</ThemedText>
                </View>
                <View style={styles.paymentInfoRow}>
                  <ThemedText style={styles.paymentInfoLabel}>Ng√¢n h√†ng:</ThemedText>
                  <ThemedText style={styles.paymentInfoValue}>Techcombank</ThemedText>
                </View>
                <View style={styles.paymentInfoRow}>
                  <ThemedText style={styles.paymentInfoLabel}>S·ªë ti·ªÅn:</ThemedText>
                  <ThemedText style={styles.paymentInfoValue}>{parseInt(bookingData?.depositAmount || 0).toLocaleString()}ƒë</ThemedText>
                </View>
              </View>

              <View style={styles.qrPaymentButtons}>
                <TouchableOpacity 
                  onPress={confirmDepositPayment}
                  style={styles.confirmPaymentButton}
                >
                  <ThemedText style={styles.confirmPaymentButtonText}>
                    ‚úÖ ƒê√£ chuy·ªÉn kho·∫£n - X√°c nh·∫≠n
                  </ThemedText>
                </TouchableOpacity>
                
                <TouchableOpacity 
                  onPress={cancelPayment}
                  style={styles.cancelPaymentButton}
                >
                  <ThemedText style={styles.cancelPaymentButtonText}>
                    ‚ùå H·ªßy thanh to√°n
                  </ThemedText>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </View>
      )}

      {/* Modal ch·ªçn c·ªçc ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang m√†n h√¨nh select-deposit */}
    </ThemedView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
  },
  header: {
    marginBottom: 30,
    alignItems: 'center',
  },
  section: {
    marginBottom: 25,
  },
  sectionTitle: {
    marginBottom: 15,
    fontSize: 18,
  },
  infoCard: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  infoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  infoLabel: {
    fontSize: 16,
    color: '#666',
  },
  infoValue: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  menuCard: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  menuItem: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingVertical: 8,
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  menuItemInfo: {
    flex: 1,
  },
  menuItemName: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  menuItemQuantity: {
    marginHorizontal: 10,
  },
  menuItemQuantityText: {
    fontSize: 16,
    fontWeight: 'bold',
  },
  menuItemPrice: {
    minWidth: 80,
    alignItems: 'flex-end',
  },
  menuItemPriceText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#16a34a',
  },
  totalSection: {
    backgroundColor: '#e3f2fd',
    padding: 15,
    borderRadius: 10,
    marginBottom: 20,
  },
  totalRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  totalLabel: {
    fontSize: 18,
  },
  totalAmount: {
    fontSize: 20,
    color: '#16a34a',
  },
  noticeCard: {
    backgroundColor: '#fff3cd',
    padding: 15,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#ffeaa7',
    marginBottom: 20,
  },
  noticeText: {
    fontSize: 14,
    color: '#856404',
    textAlign: 'center',
  },
  buttonContainer: {
    paddingTop: 20,
  },
  confirmButton: {
    backgroundColor: '#28a745',
    paddingVertical: 15,
    borderRadius: 10,
    alignItems: 'center',
  },
  buttonDisabled: {
    backgroundColor: '#ccc',
  },
  confirmButtonText: {
    color: '#fff',
    fontSize: 16,
  },
  depositCard: {
    backgroundColor: '#f8f9fa',
    padding: 15,
    borderRadius: 10,
    borderWidth: 1,
    borderColor: '#e9ecef',
  },
  depositInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    fontSize: 16,
    marginBottom: 10,
    backgroundColor: '#fff',
  },
  depositNote: {
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
  },
  depositLabel: {
    fontSize: 16,
    color: '#666',
  },
  depositAmount: {
    fontSize: 16,
    color: '#ff6b35',
  },
  depositDisplay: {
    padding: 16,
    backgroundColor: '#f0f9ff',
    borderRadius: 12,
    borderWidth: 1,
    borderColor: '#0ea5e9',
    alignItems: 'center',
  },
  depositDisplayText: {
    fontSize: 18,
    color: '#0ea5e9',
    fontWeight: 'bold',
  },
  depositButton: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    backgroundColor: '#fff',
    marginBottom: 10,
  },
  depositButtonText: {
    fontSize: 16,
    color: '#333',
  },
  clearButton: {
    flexDirection: 'row',
    alignItems: 'center',
    alignSelf: 'flex-start',
    marginBottom: 10,
  },
  clearButtonText: {
    fontSize: 14,
    color: '#ff6b35',
    marginLeft: 5,
  },
  // QR Payment Modal Styles
  qrPaymentOverlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  qrPaymentModal: {
    backgroundColor: '#fff',
    borderRadius: 20,
    margin: 20,
    maxHeight: '90%',
    width: '90%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 10 },
    shadowOpacity: 0.3,
    shadowRadius: 20,
    elevation: 10,
  },
  qrPaymentHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    borderBottomWidth: 1,
    borderBottomColor: '#e5e7eb',
  },
  qrPaymentTitle: {
    fontSize: 20,
    fontWeight: 'bold',
    color: '#f59e0b',
  },
  closeButton: {
    padding: 5,
  },
  qrPaymentContent: {
    padding: 20,
  },
  qrPaymentSubtitle: {
    fontSize: 16,
    color: '#6b7280',
    textAlign: 'center',
    marginBottom: 20,
  },
  qrLoadingContainer: {
    alignItems: 'center',
    padding: 40,
  },
  qrSpinner: {
    width: 50,
    height: 50,
    borderWidth: 4,
    borderColor: '#f3f4f6',
    borderTopColor: '#f59e0b',
    borderRadius: 25,
    marginBottom: 15,
  },
  qrLoadingText: {
    fontSize: 16,
    color: '#6b7280',
  },
  qrCodeContainer: {
    alignItems: 'center',
    marginBottom: 20,
  },
  qrCodeImage: {
    width: 250,
    height: 250,
    borderWidth: 2,
    borderColor: '#e5e7eb',
    borderRadius: 12,
  },
  qrErrorContainer: {
    alignItems: 'center',
    padding: 40,
  },
  qrErrorText: {
    fontSize: 16,
    color: '#ef4444',
  },
  paymentInfo: {
    backgroundColor: '#f9fafb',
    padding: 15,
    borderRadius: 12,
    marginBottom: 20,
  },
  paymentInfoTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#374151',
    marginBottom: 10,
  },
  paymentInfoRow: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 5,
  },
  paymentInfoLabel: {
    fontSize: 14,
    color: '#6b7280',
  },
  paymentInfoValue: {
    fontSize: 14,
    color: '#374151',
    fontWeight: '500',
  },
  qrPaymentButtons: {
    gap: 12,
  },
  confirmPaymentButton: {
    backgroundColor: '#10b981',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 12,
    alignItems: 'center',
  },
  confirmPaymentButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  cancelPaymentButton: {
    backgroundColor: '#ef4444',
    paddingVertical: 15,
    paddingHorizontal: 20,
    borderRadius: 12,
    alignItems: 'center',
  },
  cancelPaymentButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});
