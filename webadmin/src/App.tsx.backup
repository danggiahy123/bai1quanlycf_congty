import React, { useEffect, useMemo, useState } from 'react';
import axios from 'axios';
import { Dialog } from '@headlessui/react';
import { PencilSquareIcon, TrashIcon, PlusIcon } from '@heroicons/react/24/outline';
import { Toaster, toast } from 'react-hot-toast';
import AuthSimple from './components/AuthSimple';
import PaymentsAdmin from './components/PaymentsAdmin';
// import DepositPaymentModal from './components/DepositPaymentModal';
import TransactionHistory from './components/TransactionHistory';
import InventoryManagement from './components/InventoryManagement';
import Dashboard from './components/Dashboard';
import ModernDashboard from './components/ModernDashboard';
// import MenuList from './components/MenuList'; // Component kh√¥ng t·ªìn t·∫°i
import InventoryDashboard from './components/InventoryDashboard';
import StockCheck from './components/StockCheck';
import ImportExport from './components/ImportExport';
import SimpleInventory from './components/SimpleInventory';
import SimpleStockManagement from './components/SimpleStockManagement';
import Layout from './components/Layout';
import { useSocket } from './hooks/useSocket';

type TableHistoryEntry = {
  _id: string;
  tableId: string;
  tableName: string;
  action: 'OCCUPIED' | 'FREED' | 'PAID' | 'BOOKING_CONFIRMED' | 'BOOKING_CANCELLED';
  performedBy: string; // User ID
  performedByName: string; // User Full Name
  customerName?: string;
  bookingId?: string;
  amount?: number;
  createdAt: string;
};

type Ingredient = {
  ingredientId: string;
  ingredientName: string;
  quantity: number;
  unit: string;
};

type Menu = {
  _id: string;
  name: string;
  price: number;
  image?: string;
  note?: string;
  available?: boolean;
  size?: string;
  category?: string;
  ingredients?: Ingredient[];
};

const API = import.meta.env.VITE_API_URL || 'http://localhost:5000';

// Axios interceptor ƒë·ªÉ x·ª≠ l√Ω l·ªói 401
axios.interceptors.response.use(
  (response) => response,
  (error) => {
    if (error.response?.status === 401) {
      // X√≥a token v√† user kh·ªèi localStorage
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      // Reload trang ƒë·ªÉ quay v·ªÅ m√†n h√¨nh ƒëƒÉng nh·∫≠p
      window.location.reload();
    }
    return Promise.reject(error);
  }
);

const emptyForm: Omit<Menu, '_id'> = {
  name: '',
  price: 0,
  image: '',
  note: '',
  available: true,
};

type Employee = {
  id: string;
  username: string;
  fullName: string;
  email: string;
  role: string;
};

export default function App() {
  const [user, setUser] = useState<Employee | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [currentPage, setCurrentPage] = useState<'dashboard' | 'menu' | 'tables' | 'employees' | 'customers' | 'payments' | 'inventory' | 'stock' | 'import-export' | 'transactions'>('dashboard');
  const [items, setItems] = useState<Menu[]>([]);
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [form, setForm] = useState<Omit<Menu, '_id'>>(emptyForm);
  const [q, setQ] = useState('');
  const [stats, setStats] = useState<{pending: number; confirmed: number; todayConfirmed: number; thisMonthConfirmed: number} | null>(null);
  const [notifications, setNotifications] = useState<any[]>([]);
  
  // Socket.IO hook
  const { socket, isConnected } = useSocket();

  // Ki·ªÉm tra token trong localStorage khi kh·ªüi ƒë·ªông
  useEffect(() => {
    const savedToken = localStorage.getItem('token');
    const savedUser = localStorage.getItem('user');
    console.log('üîß Loading from localStorage - Token:', savedToken ? 'Present' : 'Missing');
    console.log('üîß Loading from localStorage - User:', savedUser ? 'Present' : 'Missing');
    if (savedToken && savedUser) {
      setToken(savedToken);
      setUser(JSON.parse(savedUser));
      console.log('üîß Token and user loaded from localStorage');
    }
  }, []);

  // Socket.IO real-time updates
  useEffect(() => {
    if (!socket) return;

    const handleTableStatusChange = (data: any) => {
      console.log('üîÑ Table status changed:', data);
      toast.success(`B√†n ${data.tableName} ƒë√£ ${data.status === 'occupied' ? 'ƒë∆∞·ª£c ƒë·∫∑t' : 'tr·ªëng'}`);
      // Refresh tables data if on tables page
      if (currentPage === 'tables') {
        loadTables();
      }
    };

    const handleBookingStatusChange = (data: any) => {
      console.log('üìÖ Booking status changed:', data);
      toast.success(`Booking ${data.bookingId} ƒë√£ ${data.status}`);
      // Refresh bookings data if on bookings page
      if (currentPage === 'bookings') {
        loadBookings();
      }
      // Refresh stats
      loadStats();
    };

    const handleBookingCreated = (data: any) => {
      console.log('üìÖ New booking created:', data);
      toast.info(`C√≥ ƒë·∫∑t b√†n m·ªõi: B√†n ${data.tableName} - ${data.customerName}`);
      // Refresh bookings data if on bookings page
      if (currentPage === 'bookings') {
        loadBookings();
      }
      // Refresh stats
      loadStats();
    };

    const handleOrderStatusChange = (data: any) => {
      console.log('üõí Order status changed:', data);
      toast.success(`ƒê∆°n h√†ng b√†n ${data.tableName} ƒë√£ ${data.status}`);
      // Refresh orders data if on payments page
      if (currentPage === 'payments') {
        loadPayments();
      }
    };

    const handlePaymentStatusChange = (data: any) => {
      console.log('üí≥ Payment status changed:', data);
      toast.success(`Thanh to√°n b√†n ${data.tableName} th√†nh c√¥ng: ${data.amount?.toLocaleString()}ƒë`);
      // Refresh payments data
      if (currentPage === 'payments') {
        loadPayments();
      }
      // Refresh stats
      loadStats();
    };

    const handleNewNotification = (data: any) => {
      console.log('üîî New notification:', data);
      toast.info(data.title || 'Th√¥ng b√°o m·ªõi');
    };

    const handleDepositBookingCreated = (data: any) => {
      console.log('üí∞ New deposit booking created:', data);
      toast(`üí∞ ${data.message} - B√†n ${data.tableName}`, {
        icon: '‚ö†Ô∏è',
        style: {
          background: '#fbbf24',
          color: '#1f2937',
        },
      });
      // Refresh bookings data if on bookings page
      if (currentPage === 'bookings') {
        loadBookings();
      }
      // Refresh stats
      loadStats();
    };

    const handlePaymentConfirmed = (data: any) => {
      console.log('üí≥ Payment confirmed:', data);
      toast.success(`üí≥ Thanh to√°n c·ªçc ${data.amount?.toLocaleString()}ƒë cho b√†n ${data.tableName} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n`);
      // Refresh bookings data if on bookings page
      if (currentPage === 'bookings') {
        loadBookings();
      }
      // Refresh stats
      loadStats();
    };

    const handleManualPaymentConfirmed = (data: any) => {
      console.log('üí∞ Manual payment confirmed:', data);
      toast.success(`üí∞ ${data.message}`, {
        icon: '‚úÖ',
        style: {
          background: '#10B981',
          color: 'white',
        },
      });
      // Refresh bookings data if on bookings page
      if (currentPage === 'bookings') {
        loadBookings();
      }
      // Refresh stats
      loadStats();
    };

    const handleQrPaymentConfirmed = (data: any) => {
      console.log('üì± QR payment confirmed:', data);
      toast.success(`üì± ${data.message}`, {
        icon: 'üì±',
        style: {
          background: '#3B82F6',
          color: 'white',
        },
      });
      // Refresh bookings data if on bookings page
      if (currentPage === 'bookings') {
        loadBookings();
      }
      // Refresh stats
      loadStats();
    };

    // Listen for real-time events
    socket.on('table_status_changed', handleTableStatusChange);
    socket.on('booking_status_changed', handleBookingStatusChange);
    socket.on('booking_created', handleBookingCreated);
    socket.on('deposit_booking_created', handleDepositBookingCreated);
    socket.on('payment_confirmed', handlePaymentConfirmed);
    socket.on('manual_payment_confirmed', handleManualPaymentConfirmed);
    socket.on('qr_payment_confirmed', handleQrPaymentConfirmed);
    socket.on('order_status_changed', handleOrderStatusChange);
    socket.on('payment_status_changed', handlePaymentStatusChange);
    socket.on('new_notification', handleNewNotification);

    return () => {
      socket.off('table_status_changed', handleTableStatusChange);
      socket.off('booking_status_changed', handleBookingStatusChange);
      socket.off('booking_created', handleBookingCreated);
      socket.off('deposit_booking_created', handleDepositBookingCreated);
      socket.off('payment_confirmed', handlePaymentConfirmed);
      socket.off('manual_payment_confirmed', handleManualPaymentConfirmed);
      socket.off('qr_payment_confirmed', handleQrPaymentConfirmed);
      socket.off('order_status_changed', handleOrderStatusChange);
      socket.off('payment_status_changed', handlePaymentStatusChange);
      socket.off('new_notification', handleNewNotification);
    };
  }, [socket, currentPage]);

  const handleLogin = (employee: Employee, authToken: string) => {
    console.log('üîß Login successful:', employee);
    console.log('üîß Token received:', authToken ? 'Present' : 'Missing');
    setUser(employee);
    setToken(authToken);
    localStorage.setItem('token', authToken);
    localStorage.setItem('user', JSON.stringify(employee));
    console.log('üîß Token saved to localStorage');
  };

  const handleLogout = () => {
    setUser(null);
    setToken(null);
    localStorage.removeItem('token');
    localStorage.removeItem('user');
  };

  const filtered = useMemo(() => {
    if (!Array.isArray(items)) return [];
    if (!q.trim()) return items;
    return items.filter((x) => `${x.name} ${x.note ?? ''}`.toLowerCase().includes(q.toLowerCase()));
  }, [items, q]);

  async function load() {
    setLoading(true);
    try {
      const res = await axios.get<{data: Menu[], pagination: any}>(`${API}/api/menu`);
      console.log('Menu API response:', res.data);
      if (Array.isArray(res.data.data)) {
        setItems(res.data.data);
      } else {
        console.error('API returned non-array data:', res.data);
        setItems([]);
      }
    } catch (error) {
      console.error('Error loading menu:', error);
      setItems([]);
    } finally {
      setLoading(false);
    }
  }

  async function loadStats() {
    try {
      const res = await axios.get<{pending: number; confirmed: number; todayConfirmed: number; thisMonthConfirmed: number}>(`${API}/api/bookings/stats`);
      setStats(res.data);
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  }

  useEffect(() => {
    load();
    loadStats();
  }, []);

  // Auto refresh stats every 30 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      loadStats();
    }, 30000); // 30 seconds

    return () => clearInterval(interval);
  }, []);

  // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, hi·ªÉn th·ªã m√†n h√¨nh ƒëƒÉng nh·∫≠p
  if (!user || !token) {
    return <AuthSimple onLogin={handleLogin} />;
  }

  function startCreate() {
    setEditingId(null);
    setForm(emptyForm);
    setOpen(true);
  }

  function startEdit(row: Menu) {
    setEditingId(row._id);
    setForm({
      name: row.name,
      price: row.price,
      image: row.image || '',
      note: row.note || '',
      available: row.available ?? true,
    });
    setOpen(true);
  }

  async function save() {
    try {
      if (editingId) {
        await axios.put(`${API}/api/menu/${editingId}`, form);
        toast.success('C·∫≠p nh·∫≠t m√≥n th√†nh c√¥ng!');
      } else {
        await axios.post(`${API}/api/menu`, form);
        toast.success('Th√™m m√≥n m·ªõi th√†nh c√¥ng!');
      }
      setOpen(false);
      await load();
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'C√≥ l·ªói x·∫£y ra');
    }
  }

  async function remove(id: string) {
    if (!confirm('X√≥a m√≥n n√†y?')) return;
    try {
      await axios.delete(`${API}/api/menu/${id}`);
      toast.success('X√≥a m√≥n th√†nh c√¥ng!');
      await load();
    } catch (error: any) {
      toast.error(error.response?.data?.error || 'C√≥ l·ªói x·∫£y ra');
    }
  }


  return (
    <div className="min-h-screen">
      <Toaster 
        position="top-right"
        toastOptions={{
          duration: 3000,
          style: {
            background: '#363636',
            color: '#fff',
          },
          success: {
            duration: 3000,
            iconTheme: {
              primary: '#4ade80',
              secondary: '#fff',
            },
          },
          error: {
            duration: 4000,
            iconTheme: {
              primary: '#ef4444',
              secondary: '#fff',
            },
          },
        }}
      />
      
      <Layout 
        currentPage={currentPage} 
        onPageChange={setCurrentPage}
        notifications={notifications}
      >
        {console.log('üîß App render:', { currentPage, token: token ? 'Present' : 'Missing', user: user ? 'Present' : 'Missing' })}
        {currentPage==='dashboard' ? (
          <ModernDashboard API={API} token={token} />
        ) : currentPage==='menu' ? (
          loading ? (
            <div className="flex flex-col items-center justify-center py-16">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-green-500 mb-4"></div>
              <p className="text-gray-400 text-lg">ƒêang t·∫£i th·ª±c ƒë∆°n...</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5 gap-6">
              {filtered.map((m) => (
                <div key={m._id} className="bg-gray-800 rounded-xl border border-gray-600 shadow-lg overflow-hidden hover:shadow-xl hover:border-green-500 transition-all duration-300 group">
                  {/* Image Container - T·ª∑ l·ªá d·ªçc cho h√¨nh ·∫£nh d√†i */}
                  <div className="relative h-64 bg-gradient-to-br from-gray-700 to-gray-800 overflow-hidden">
                    {m.image ? (
                      <img
                        src={m.image.startsWith('http') ? m.image : `${API}${m.image}`}
                        className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"
                        alt={m.name}
                      />
                    ) : (
                      <div className="w-full h-full flex items-center justify-center text-gray-400">
                        <svg className="w-16 h-16" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                      </div>
                    )}
                    
                    {/* Status Badge - Floating on image */}
                    <div className="absolute top-3 left-3">
                      <span
                        className={`text-xs px-2 py-1 rounded-full font-medium backdrop-blur-sm ${
                          m.available 
                            ? 'bg-green-500/90 text-white border border-green-400/50' 
                            : 'bg-gray-800/90 text-gray-300 border border-gray-600/50'
                        }`}
                      >
                        {m.available ? 'ƒêang b√°n' : 'T·∫°m ng·ª´ng'}
                      </span>
                    </div>

                    {/* Action Buttons - Floating on image */}
                    <div className="absolute top-3 right-3 flex gap-2 opacity-0 group-hover:opacity-100 transition-opacity duration-300">
                      <button 
                        onClick={() => startEdit(m)} 
                        className="p-2 bg-blue-600/90 text-white rounded-lg hover:bg-blue-500 transition-colors backdrop-blur-sm border border-blue-400/50"
                        title="Ch·ªânh s·ª≠a"
                      >
                        <PencilSquareIcon className="w-4 h-4" />
                      </button>
                      <button 
                        onClick={() => remove(m._id)} 
                        className="p-2 bg-red-600/90 text-white rounded-lg hover:bg-red-500 transition-colors backdrop-blur-sm border border-red-400/50"
                        title="X√≥a"
                      >
                        <TrashIcon className="w-4 h-4" />
                      </button>
                    </div>
                  </div>

                  {/* Content */}
                  <div className="p-4 space-y-3">
                    {/* Name and Size */}
                    <div className="space-y-1">
                      <h3 className="font-semibold text-white text-lg leading-tight">
                        {m.name}
                      </h3>
                      {m.size && (
                        <span className="text-sm text-gray-400 font-medium">
                          {m.size}
                        </span>
                      )}
                    </div>

                    {/* Description */}
                    {m.note && (
                      <p className="text-sm text-gray-300 leading-relaxed line-clamp-2">
                        {m.note}
                      </p>
                    )}

                    {/* Price */}
                    <div className="pt-2 border-t border-gray-700">
                      <div className="flex items-center justify-between">
                        <span className="text-2xl font-bold text-green-400">
                          {m.price.toLocaleString()}ƒë
                        </span>
                        <div className="flex items-center space-x-1">
                          <span className="text-xs text-gray-400">Gi√° b√°n</span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ))}
              {!filtered.length && (
                <div className="col-span-full flex flex-col items-center justify-center py-16">
                  <svg className="w-20 h-20 text-gray-600 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                  </svg>
                  <h3 className="text-xl font-semibold text-gray-400 mb-2">Ch∆∞a c√≥ m√≥n ƒÉn n√†o</h3>
                  <p className="text-gray-500 text-center max-w-md">
                    H√£y th√™m m√≥n ƒÉn ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω th·ª±c ƒë∆°n c·ªßa b·∫°n
                  </p>
                </div>
              )}
            </div>
          )
        ) : currentPage==='tables' ? (
          <TablesAdmin />
        ) : currentPage==='employees' ? (
          <EmployeesAdmin />
        ) : currentPage==='customers' ? (
          <CustomersAdmin />
        ) : currentPage==='payments' ? (
          <PaymentsAdmin />
        ) : currentPage==='inventory' ? (
          <SimpleStockManagement API={API} token={token} />
        ) : currentPage==='stock' ? (
          <StockCheck API={API} token={token} />
        ) : currentPage==='import-export' ? (
          <ImportExport API={API} token={token} />
        ) : currentPage==='transactions' ? (
          <TransactionHistory API={API} />
        ) : (
          <BookingsAdmin stats={stats} onStatsChange={setStats} token={token} />
        )}
      </Layout>

      <Dialog open={open} onClose={() => setOpen(false)} className="relative z-50">
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel className="mx-auto w-full max-w-lg rounded-xl bg-gray-800 p-6 space-y-4">
            <Dialog.Title className="text-lg font-semibold">{editingId ? 'S·ª≠a m√≥n' : 'Th√™m m√≥n'}</Dialog.Title>

            <div className="grid grid-cols-2 gap-4">
              <div className="col-span-2">
                <label className="text-sm">T√™n m√≥n</label>
                <input
                  className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
                  value={form.name}
                  onChange={(e) => setForm((f) => ({ ...f, name: e.target.value }))}
                />
              </div>
              <div>
                <label className="text-sm">Gi√° (ƒë)</label>
                <input
                  type="number"
                  className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
                  value={form.price}
                  onChange={(e) => setForm((f) => ({ ...f, price: Number(e.target.value) }))}
                />
              </div>
              <div>
                <label className="text-sm">Tr·∫°ng th√°i</label>
                <select
                  className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
                  value={form.available ? '1' : '0'}
                  onChange={(e) => setForm((f) => ({ ...f, available: e.target.value === '1' }))}
                >
                  <option value="1">ƒêang b√°n</option>
                  <option value="0">T·∫°m ng·ª´ng</option>
                </select>
              </div>
              <div className="col-span-2">
                <label className="text-sm">Link ·∫£nh</label>
                <input
                  className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
                  placeholder="https://... ho·∫∑c /uploads/xxx.jpg"
                  value={form.image}
                  onChange={(e) => setForm((f) => ({ ...f, image: e.target.value }))}
                />
              </div>
              <div className="col-span-2">
                <label className="text-sm">Ghi ch√∫</label>
                <textarea
                  className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
                  rows={2}
                  value={form.note}
                  onChange={(e) => setForm((f) => ({ ...f, note: e.target.value }))}
                />
              </div>
            </div>

            <div className="flex justify-end gap-3 pt-2">
              <button onClick={() => setOpen(false)} className="px-4 py-2 rounded-md border border-gray-500 text-gray-300 bg-gray-700 hover:bg-gray-600">
                H·ªßy
              </button>
              <button onClick={save} className="px-4 py-2 rounded-md bg-green-600 text-white hover:bg-green-700">
                L∆∞u
              </button>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>
  );
}











// --- Employees Admin ---
type EmployeeData = { 
  _id: string; 
  username: string; 
  fullName: string; 
  email: string; 
  role: 'admin'|'staff'; 
  isActive: boolean;
  createdAt: string;
};

function EmployeesAdmin() {
  const API = import.meta.env.VITE_API_URL || 'http://localhost:5000';
  const [employees, setEmployees] = useState<EmployeeData[]>([]);
  const [loading, setLoading] = useState(false);
  const [open, setOpen] = useState(false);
  const [editingId, setEditingId] = useState<string | null>(null);
  const [form, setForm] = useState<Omit<EmployeeData, '_id' | 'createdAt'>>({
    username: '',
    fullName: '',
    email: '',
    role: 'staff',
    isActive: true
  });
  const [password, setPassword] = useState('');

  async function load() {
    setLoading(true);
    try {
      const res = await axios.get<EmployeeData[]>(`${API}/api/employees`);
      setEmployees(res.data);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, []);

  function startCreate() {
    setEditingId(null);
    setForm({
      username: '',
      fullName: '',
      email: '',
      role: 'staff',
      isActive: true
    });
    setPassword('');
    setOpen(true);
  }

  function startEdit(emp: EmployeeData) {
    setEditingId(emp._id);
    setForm({
      username: emp.username,
      fullName: emp.fullName,
      email: emp.email,
      role: emp.role,
      isActive: emp.isActive
    });
    setPassword('');
    setOpen(true);
  }

  async function save() {
    try {
      if (editingId) {
        // C·∫≠p nh·∫≠t nh√¢n vi√™n
        await axios.put(`${API}/api/employees/${editingId}`, form);
      } else {
        // T·∫°o nh√¢n vi√™n m·ªõi
        await axios.post(`${API}/api/employees/register`, {
          ...form,
          password: password
        });
      }
      setOpen(false);
      await load();
    } catch (error: any) {
      alert(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra');
    }
  }

  async function remove(id: string) {
    if (!confirm('X√≥a nh√¢n vi√™n n√†y?')) return;
    try {
      await axios.delete(`${API}/api/employees/${id}`);
      await load();
    } catch (error: any) {
      alert(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra');
    }
  }

  return (
    <div>
      <div className="flex items-center gap-2 mb-4">
        <button onClick={startCreate} className="ml-auto inline-flex items-center gap-2 bg-red-600 text-white px-3 py-2 rounded-md hover:bg-red-700">
          <PlusIcon className="w-5 h-5" /> Th√™m nh√¢n vi√™n
        </button>
      </div>

      {loading ? <div>ƒêang t·∫£i...</div> : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {employees.map(emp => (
            <div key={emp._id} className="bg-gray-800 rounded-xl border border-gray-600 shadow-lg p-4">
              <div className="flex items-start justify-between">
                <div>
                  <div className="font-semibold text-white">{emp.fullName}</div>
                  <div className="text-sm text-gray-300">@{emp.username}</div>
                  <div className="text-sm text-gray-400">{emp.email}</div>
                </div>
                <span className={`text-xs px-2 py-0.5 rounded ${emp.role==='admin'?'bg-purple-600 text-purple-100':'bg-red-600 text-red-100'}`}>
                  {emp.role==='admin'?'Qu·∫£n l√Ω':'Nh√¢n vi√™n'}
                </span>
              </div>
              <div className="flex items-center gap-2 mt-3">
                <button onClick={() => startEdit(emp)} className="px-3 py-1.5 rounded-md border border-gray-500 text-gray-300 hover:bg-gray-700 hover:text-white transition-colors">S·ª≠a</button>
                <button onClick={() => remove(emp._id)} className="ml-auto p-2 rounded hover:bg-gray-700 text-gray-300 hover:text-white transition-colors">
                  <TrashIcon className="w-5 h-5 text-red-400" />
                </button>
              </div>
            </div>
          ))}
          {!employees.length && <div className="text-gray-400">Kh√¥ng c√≥ nh√¢n vi√™n n√†o.</div>}
        </div>
      )}

      <Dialog open={open} onClose={() => setOpen(false)} className="relative z-50">
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel className="mx-auto w-full max-w-md rounded-xl bg-gray-800 p-6 space-y-4">
            <Dialog.Title className="text-lg font-semibold">{editingId ? 'S·ª≠a nh√¢n vi√™n' : 'Th√™m nh√¢n vi√™n'}</Dialog.Title>
            <div className="space-y-3">
              <div>
                <label className="text-sm">T√™n ƒëƒÉng nh·∫≠p</label>
                <input className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={form.username} onChange={e=>setForm(f=>({ ...f, username: e.target.value }))} placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p" />
              </div>
              <div>
                <label className="text-sm">H·ªç v√† t√™n</label>
                <input className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={form.fullName} onChange={e=>setForm(f=>({ ...f, fullName: e.target.value }))} placeholder="Nh·∫≠p h·ªç v√† t√™n" />
              </div>
              <div>
                <label className="text-sm">Email</label>
                <input type="email" className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={form.email} onChange={e=>setForm(f=>({ ...f, email: e.target.value }))} placeholder="Nh·∫≠p email" />
              </div>
              <div>
                <label className="text-sm">Vai tr√≤</label>
                <select className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={form.role} onChange={e=>setForm(f=>({ ...f, role: e.target.value as 'admin'|'staff' }))}>
                  <option value="staff">Nh√¢n vi√™n</option>
                  <option value="admin">Qu·∫£n l√Ω</option>
                </select>
              </div>
              {!editingId && (
                <div>
                  <label className="text-sm">M·∫≠t kh·∫©u</label>
                  <input type="password" className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={password} onChange={e=>setPassword(e.target.value)} placeholder="Nh·∫≠p m·∫≠t kh·∫©u" />
                </div>
              )}
            </div>
            <div className="flex justify-end gap-3 pt-2">
              <button onClick={() => setOpen(false)} className="px-4 py-2 rounded-md border border-gray-500 text-gray-300 bg-gray-700 hover:bg-gray-600">H·ªßy</button>
              <button onClick={save} className="px-4 py-2 rounded-md bg-green-600 text-white hover:bg-green-700">L∆∞u</button>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>
    </div>
  );
}











// --- Customers Admin ---
type CustomerData = { 
  _id: string; 
  username: string; 
  fullName: string; 
  email: string; 
  phone: string;
  address: string;
  isActive: boolean;
  createdAt: string;
};

type CustomerStats = {
  totalCustomers: number;
  newToday: number;
  newThisMonth: number;
};

function CustomersAdmin() {
  const API = import.meta.env.VITE_API_URL || 'http://localhost:5000';
  const [customers, setCustomers] = useState<CustomerData[]>([]);
  const [stats, setStats] = useState<CustomerStats | null>(null);
  const [loading, setLoading] = useState(false);
  const [search, setSearch] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [total, setTotal] = useState(0);

  async function loadCustomers() {
    setLoading(true);
    try {
      const params = new URLSearchParams({
        page: currentPage.toString(),
        limit: '10',
        search: search
      });
      
      const res = await axios.get<{
        customers: CustomerData[];
        pagination: { current: number; pages: number; total: number };
      }>(`${API}/api/customers?${params}`);
      
      setCustomers(res.data.customers);
      setTotalPages(res.data.pagination.pages);
      setTotal(res.data.pagination.total);
    } finally {
      setLoading(false);
    }
  }

  async function loadStats() {
    try {
      const res = await axios.get<CustomerStats>(`${API}/api/customers/stats`);
      setStats(res.data);
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  }

  useEffect(() => { 
    loadCustomers();
    loadStats();
  }, [currentPage, search]);

  const handleSearch = (value: string) => {
    setSearch(value);
    setCurrentPage(1);
  };

  return (
    <div>
      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">T·ªïng kh√°ch h√†ng</p>
                <p className="text-2xl font-bold text-white">{stats.totalCustomers}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">H√¥m nay</p>
                <p className="text-2xl font-bold text-white">{stats.newToday}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">Th√°ng n√†y</p>
                <p className="text-2xl font-bold text-white">{stats.newThisMonth}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Search */}
      <div className="flex items-center gap-2 mb-4">
        <input
          placeholder="T√¨m ki·∫øm kh√°ch h√†ng..."
          className="flex-1 rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
          value={search}
          onChange={(e) => handleSearch(e.target.value)}
        />
        <div className="text-sm text-gray-400">
          T·ªïng: {total} kh√°ch h√†ng
        </div>
      </div>

      {/* Customers List */}
      {loading ? (
        <div className="text-center py-8">ƒêang t·∫£i...</div>
      ) : (
        <div className="bg-gray-800 rounded-xl border border-gray-600 shadow-lg overflow-hidden">
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-700">
                <tr>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Kh√°ch h√†ng</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Th√¥ng tin li√™n h·ªá</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Ng√†y ƒëƒÉng k√Ω</th>
                  <th className="px-6 py-3 text-left text-xs font-medium text-gray-300 uppercase tracking-wider">Tr·∫°ng th√°i</th>
                </tr>
              </thead>
              <tbody className="bg-gray-800 divide-y divide-gray-600">
                {customers.map((customer) => (
                  <tr key={customer._id} className="hover:bg-gray-700">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div>
                        <div className="text-sm font-medium text-white">{customer.fullName}</div>
                        <div className="text-sm text-gray-400">@{customer.username}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-white">{customer.email}</div>
                      {customer.phone && (
                        <div className="text-sm text-gray-400">{customer.phone}</div>
                      )}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-400">
                      {new Date(customer.createdAt).toLocaleDateString('vi-VN')}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                        customer.isActive 
                          ? 'bg-green-100 text-green-800' 
                          : 'bg-red-100 text-red-800'
                      }`}>
                        {customer.isActive ? 'Ho·∫°t ƒë·ªông' : 'Kh√¥ng ho·∫°t ƒë·ªông'}
                      </span>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="bg-gray-800 px-4 py-3 flex items-center justify-between border-t border-gray-600 sm:px-6">
              <div className="flex-1 flex justify-between sm:hidden">
                <button
                  onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                  disabled={currentPage === 1}
                  className="relative inline-flex items-center px-4 py-2 border border-gray-500 text-sm font-medium rounded-md text-gray-300 bg-gray-700 hover:bg-gray-600 disabled:opacity-50"
                >
                  Tr∆∞·ªõc
                </button>
                <button
                  onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                  disabled={currentPage === totalPages}
                  className="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                >
                  Sau
                </button>
              </div>
              <div className="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                <div>
                  <p className="text-sm text-gray-700">
                    Trang <span className="font-medium">{currentPage}</span> / <span className="font-medium">{totalPages}</span>
                  </p>
                </div>
                <div>
                  <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
                    <button
                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                      disabled={currentPage === 1}
                      className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-500 bg-gray-700 text-sm font-medium text-gray-300 hover:bg-gray-600 disabled:opacity-50"
                    >
                      Tr∆∞·ªõc
                    </button>
                    <button
                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                      disabled={currentPage === totalPages}
                      className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-500 bg-gray-700 text-sm font-medium text-gray-300 hover:bg-gray-600 disabled:opacity-50"
                    >
                      Sau
                    </button>
                  </nav>
                </div>
              </div>
            </div>
          )}

          {customers.length === 0 && (
            <div className="text-center py-8 text-gray-400">
              Kh√¥ng c√≥ kh√°ch h√†ng n√†o.
            </div>
          )}
        </div>
      )}
    </div>
  );
}











// --- Bookings Admin ---
type BookingData = {
  _id: string;
  customer?: {
    _id: string;
    fullName: string;
    email: string;
    phone: string;
  } | null;
  customerInfo?: {
    fullName: string;
    email: string;
    phone: string;
  };
  table: {
    _id: string;
    name: string;
  };
  numberOfGuests: number;
  bookingDate: string;
  bookingTime: string;
  menuItems: Array<{
    item: {
      _id: string;
      name: string;
      price: number;
    };
    quantity: number;
    price: number;
  }>;
  totalAmount: number;
  depositAmount?: number;
  status: 'pending' | 'confirmed' | 'cancelled' | 'completed';
  notes?: string;
  confirmedBy?: {
    _id: string;
    fullName: string;
  };
  confirmedAt?: string;
  createdAt: string;
};

type BookingStats = {
  pending: number;
  confirmed: number;
  todayConfirmed: number;
  thisMonthConfirmed: number;
};

function BookingsAdmin({ stats, onStatsChange, token }: { stats: {pending: number; confirmed: number; todayConfirmed: number; thisMonthConfirmed: number} | null; onStatsChange: (stats: {pending: number; confirmed: number; todayConfirmed: number; thisMonthConfirmed: number}) => void; token: string | null }) {
  const API = import.meta.env.VITE_API_URL || 'http://localhost:5000';
  
  const handleLogout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('user');
    window.location.reload();
  };
  const [bookings, setBookings] = useState<BookingData[]>([]);
  const [loading, setLoading] = useState(false);
  const [statusFilter, setStatusFilter] = useState('pending');
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [total, setTotal] = useState(0);
  const [lastBookingCount, setLastBookingCount] = useState(0);
  const [showNewBookingAlert, setShowNewBookingAlert] = useState(false);
  const [showNewBookingForm, setShowNewBookingForm] = useState(false);
  const [newBookingForm, setNewBookingForm] = useState({
    customerId: '',
    customerPhone: '',
    tableId: '',
    numberOfGuests: 1,
    bookingDate: new Date().toISOString().split('T')[0],
    bookingTime: new Date().toTimeString().slice(0, 5),
    specialRequests: '',
    depositAmount: ''
  });
  const [tables, setTables] = useState<{_id: string; name: string; status: string}[]>([]);
  const [foundCustomer, setFoundCustomer] = useState<{_id: string; username: string; fullName: string; email: string; phone: string} | null>(null);
  const [foundCustomers, setFoundCustomers] = useState<{_id: string; username: string; fullName: string; email: string; phone: string}[]>([]);
  const [searching, setSearching] = useState(false);
  const [showCustomerList, setShowCustomerList] = useState(false);
  const [showDepositModal, setShowDepositModal] = useState(false);
  const [showDepositPaymentModal, setShowDepositPaymentModal] = useState(false);
  const [depositPaymentData, setDepositPaymentData] = useState<{
    tableId: string;
    depositAmount: number;
    bookingId: string;
  } | null>(null);

  async function loadBookings() {
    setLoading(true);
    try {
      const params = new URLSearchParams({
        status: statusFilter,
        page: currentPage.toString(),
        limit: '10'
      });
      
      const res = await axios.get<{
        bookings: BookingData[];
        pagination: { current: number; pages: number; total: number };
      }>(`${API}/api/bookings/admin?${params}`);
      
      // Check for new bookings
      const newBookingCount = res.data.bookings.length;
      if (lastBookingCount > 0 && newBookingCount > lastBookingCount) {
        setShowNewBookingAlert(true);
        setTimeout(() => setShowNewBookingAlert(false), 5000); // Hide after 5 seconds
      }
      setLastBookingCount(newBookingCount);
      
      setBookings(res.data.bookings);
      setTotalPages(res.data.pagination.pages);
      setTotal(res.data.pagination.total);
    } finally {
      setLoading(false);
    }
  }

  async function loadStats() {
    try {
      const res = await axios.get<BookingStats>(`${API}/api/bookings/stats`);
      onStatsChange(res.data);
    } catch (error) {
      console.error('Error loading stats:', error);
    }
  }

  async function loadTables() {
    try {
      const res = await axios.get(`${API}/api/tables`);
      setTables(res.data);
    } catch (error) {
      console.error('Error loading tables:', error);
    }
  }

  // Ch·ªçn kh√°ch h√†ng c·ª• th·ªÉ t·ª´ danh s√°ch
  function selectCustomer(customer: {_id: string; username: string; fullName: string; email: string; phone: string}) {
    console.log('üë§ Customer selected:', customer);
    setFoundCustomer(customer);
    setFoundCustomers([]);
    setShowCustomerList(false);
    setNewBookingForm(prev => ({
      ...prev,
      customerId: customer._id,
      customerPhone: customer.phone
    }));
  }

  // T√¨m ki·∫øm kh√°ch h√†ng theo SƒêT
  async function searchCustomerByPhone(phone: string) {
    console.log('üîç searchCustomerByPhone called with:', phone, 'length:', phone?.length);
    
    if (!phone || phone.length < 8) {
      console.log('‚ùå Phone too short or empty, skipping search');
      setFoundCustomer(null);
      return;
    }

    console.log('üîç Searching for customer with phone:', phone);
    setSearching(true);
    try {
      const url = `${API}/api/bookings/search-customers?phone=${encodeURIComponent(phone)}`;
      console.log('üì° Calling API:', url);
      
      const res = await axios.get(url);
      const customers = res.data.customers || [];
      
      console.log('‚úÖ API response:', res.data);
      console.log('üìã Found customers:', customers);
      
      if (customers.length > 0) {
        if (customers.length === 1) {
          // Ch·ªâ c√≥ 1 kh√°ch h√†ng
          const customer = customers[0];
          console.log('üë§ Selected customer (single):', customer);
          setFoundCustomer(customer);
          setFoundCustomers([]);
          setShowCustomerList(false);
          setNewBookingForm(prev => ({
            ...prev,
            customerId: customer._id,
            customerPhone: customer.phone
          }));
        } else {
          // C√≥ nhi·ªÅu kh√°ch h√†ng tr√πng SƒêT - hi·ªÉn th·ªã danh s√°ch l·ª±a ch·ªçn
          console.log('‚ö†Ô∏è Multiple customers found with same phone:', customers.length);
          setFoundCustomers(customers);
          setFoundCustomer(null);
          setShowCustomerList(true);
          setNewBookingForm(prev => ({
            ...prev,
            customerId: '',
            customerPhone: phone
          }));
        }
      } else {
        console.log('‚ùå No customers found');
        setFoundCustomer(null);
        setFoundCustomers([]);
        setShowCustomerList(false);
        setNewBookingForm(prev => ({
          ...prev,
          customerId: '',
          customerPhone: phone
        }));
      }
    } catch (error) {
      console.error('‚ùå Error searching customer by phone:', error);
      setFoundCustomer(null);
    } finally {
      setSearching(false);
    }
  }

  const depositOptions = [
    { label: '50.000ƒë', value: '50000' },
    { label: '100.000ƒë', value: '100000' },
    { label: '200.000ƒë', value: '200000' },
    { label: '500.000ƒë', value: '500000' }
  ];

  const handleDepositSelect = (amount) => {
    setNewBookingForm(prev => ({ ...prev, depositAmount: amount }));
    setShowDepositModal(false);
  };

  const handleDepositClear = () => {
    setNewBookingForm(prev => ({ ...prev, depositAmount: '' }));
    setShowDepositModal(false);
  };

  async function createNewBooking() {
    if (!newBookingForm.customerPhone.trim()) {
      toast.error('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i');
      return;
    }
    if (!newBookingForm.tableId) {
      toast.error('Vui l√≤ng ch·ªçn b√†n');
      return;
    }

    try {
      const res = await axios.post(`${API}/api/bookings/admin-quick-booking`, newBookingForm);
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i kh√°ch h√†ng c√≥ s·∫µn trong h·ªá th·ªëng kh√¥ng
      const isExistingCustomer = newBookingForm.customerId;
      
      if (isExistingCustomer && foundCustomer) {
        toast.success(`üéâ ƒê·∫∑t b√†n th√†nh c√¥ng! Kh√°ch h√†ng ${foundCustomer.fullName} s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o qua app.`);
      } else {
        toast.success('T·∫°o booking th√†nh c√¥ng!');
      }
      
      // N·∫øu c√≥ s·ªë ti·ªÅn c·ªçc, hi·ªÉn th·ªã modal thanh to√°n c·ªçc
      const depositAmount = parseInt(newBookingForm.depositAmount) || 0;
      if (depositAmount > 0) {
        setDepositPaymentData({
          tableId: newBookingForm.tableId,
          depositAmount: depositAmount,
          bookingId: res.data.booking._id
        });
        setShowDepositPaymentModal(true);
      }
      
      setShowNewBookingForm(false);
      setNewBookingForm({
        customerId: '',
        customerPhone: '',
        tableId: '',
        numberOfGuests: 1,
        bookingDate: new Date().toISOString().split('T')[0],
        bookingTime: new Date().toTimeString().slice(0, 5),
        specialRequests: '',
        depositAmount: ''
      });
      setFoundCustomer(null);
      loadBookings();
      loadStats();
    } catch (error: any) {
      console.error('Error creating booking:', error);
      toast.error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi t·∫°o booking');
    }
  }

  useEffect(() => { 
    loadBookings();
    loadStats();
  }, [statusFilter, currentPage]);

  useEffect(() => {
    if (showNewBookingForm) {
      loadTables();
    }
  }, [showNewBookingForm]);


  // Auto refresh bookings every 30 seconds
  useEffect(() => {
    const interval = setInterval(() => {
      loadBookings();
      loadStats();
    }, 30000); // 30 seconds

    return () => clearInterval(interval);
  }, [statusFilter, currentPage]);

  const handleConfirm = async (bookingId: string) => {
    if (!token) {
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      return;
    }

    const booking = bookings.find(b => b._id === bookingId);
    if (!booking) {
      toast.error('Kh√¥ng t√¨m th·∫•y booking');
      return;
    }

    // X√°c nh·∫≠n tr·ª±c ti·∫øp kh√¥ng c·∫ßn ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n
    await confirmBooking(bookingId, 'cash');
  };

  const confirmBooking = async (bookingId: string, method: 'cash' | 'bank_transfer') => {
    console.log('üîß Confirming booking:', bookingId, 'with method:', method);
    console.log('üîß Token:', token ? 'Present' : 'Missing');
    console.log('üîß API URL:', API);

    // Hi·ªÉn th·ªã loading toast
    const loadingToast = toast.loading('‚è≥ ƒêang x√°c nh·∫≠n booking...');

    try {
      const booking = bookings.find(b => b._id === bookingId);
      const depositAmount = booking?.depositAmount || 0;
      
      console.log('üîß Booking found:', booking);
      console.log('üîß Deposit amount:', depositAmount);
      
      const res = await axios.post(`${API}/api/bookings/${bookingId}/confirm`, {
        depositAmount: depositAmount,
        paymentMethod: method
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      
      console.log('‚úÖ Confirm response:', res.data);
      
      // ƒê√≥ng loading toast
      toast.dismiss(loadingToast);
      
      if (res.data.message) {
        toast.success('‚úÖ X√°c nh·∫≠n booking th√†nh c√¥ng!', {
          duration: 4000,
          style: {
            background: '#10B981',
            color: 'white',
            fontWeight: 'bold',
          },
        });
        loadBookings();
        loadStats();
      } else {
        toast.error('‚ùå Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server', {
          duration: 4000,
          style: {
            background: '#EF4444',
            color: 'white',
          },
        });
      }
    } catch (error: any) {
      console.error('‚ùå Confirm error:', error);
      console.error('‚ùå Error response:', error.response?.data);
      console.error('‚ùå Error status:', error.response?.status);
      
      // ƒê√≥ng loading toast
      toast.dismiss(loadingToast);
      
      // X·ª≠ l√Ω l·ªói token h·∫øt h·∫°n
      if (error.response?.status === 401) {
        toast.error('üîê Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.', {
          duration: 5000,
          style: {
            background: '#EF4444',
            color: 'white',
          },
        });
        handleLogout();
        return;
      }
      
      if (error.response?.status === 400) {
        toast.error(`‚ùå ${error.response.data.message || 'D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá'}`, {
          duration: 4000,
          style: {
            background: '#F59E0B',
            color: 'white',
          },
        });
      } else if (error.response?.status === 404) {
        toast.error('‚ùå Kh√¥ng t√¨m th·∫•y booking', {
          duration: 4000,
          style: {
            background: '#EF4444',
            color: 'white',
          },
        });
      } else if (error.code === 'NETWORK_ERROR' || !error.response) {
        toast.error('üåê L·ªói k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra m·∫°ng v√† th·ª≠ l·∫°i.', {
          duration: 5000,
          style: {
            background: '#EF4444',
            color: 'white',
          },
        });
      } else {
        toast.error(`‚ùå ${error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra khi x√°c nh·∫≠n booking'}`, {
          duration: 4000,
          style: {
            background: '#EF4444',
            color: 'white',
          },
        });
      }
    }
  };

  const handleCancel = async (bookingId: string) => {
    if (!token) {
      toast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i');
      return;
    }

    const reason = prompt('L√Ω do h·ªßy booking:');
    if (reason === null) return;

    console.log('Cancelling booking:', bookingId);
    console.log('Token:', token);
    console.log('API URL:', API);

    try {
      const res = await axios.post(`${API}/api/bookings/${bookingId}/cancel`, 
        { reason }, 
        { headers: { Authorization: `Bearer ${token}` } }
      );
      
      console.log('Cancel response:', res.data);
      
      if (res.data.message) {
        toast.success('H·ªßy booking th√†nh c√¥ng!');
        loadBookings();
        loadStats();
      }
    } catch (error: any) {
      console.error('Cancel error:', error);
      console.error('Error response:', error.response?.data);
      
      // X·ª≠ l√Ω l·ªói token h·∫øt h·∫°n
      if (error.response?.status === 401) {
        toast.error('Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.');
        handleLogout();
        return;
      }
      
      toast.error(error.response?.data?.message || 'C√≥ l·ªói x·∫£y ra');
    }
  };


  const getStatusColor = (status: string) => {
    switch (status) {
      case 'pending': return 'bg-yellow-100 text-yellow-800';
      case 'confirmed': return 'bg-green-100 text-green-800';
      case 'cancelled': return 'bg-red-100 text-red-800';
      case 'completed': return 'bg-red-100 text-red-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getStatusText = (status: string) => {
    switch (status) {
      case 'pending': return 'Ch·ªù x√°c nh·∫≠n';
      case 'confirmed': return 'ƒê√£ x√°c nh·∫≠n';
      case 'cancelled': return 'ƒê√£ h·ªßy';
      case 'completed': return 'Ho√†n th√†nh';
      default: return status;
    }
  };

  return (
    <div>
      {/* New Booking Alert */}
      {showNewBookingAlert && (
        <div className="fixed top-4 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 flex items-center gap-2">
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <span>C√≥ booking m·ªõi! Vui l√≤ng ki·ªÉm tra.</span>
          <button 
            onClick={() => setShowNewBookingAlert(false)}
            className="ml-2 text-white hover:text-gray-200"
          >
            ‚úï
          </button>
        </div>
      )}

      {/* Stats Cards */}
      {stats && (
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-yellow-100 rounded-lg">
                <svg className="w-6 h-6 text-yellow-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">Ch·ªù x√°c nh·∫≠n</p>
                <p className="text-2xl font-bold text-white">{stats.pending}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-green-100 rounded-lg">
                <svg className="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">ƒê√£ x√°c nh·∫≠n</p>
                <p className="text-2xl font-bold text-white">{stats.confirmed}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-red-100 rounded-lg">
                <svg className="w-6 h-6 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">H√¥m nay</p>
                <p className="text-2xl font-bold text-white">{stats.todayConfirmed}</p>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 p-6 rounded-xl border border-gray-700 shadow-lg">
            <div className="flex items-center">
              <div className="p-2 bg-purple-100 rounded-lg">
                <svg className="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
              </div>
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-300">Th√°ng n√†y</p>
                <p className="text-2xl font-bold text-white">{stats.thisMonthConfirmed}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Filter */}
      <div className="flex items-center gap-4 mb-4">
        <select
          value={statusFilter}
          onChange={(e) => {
            setStatusFilter(e.target.value);
            setCurrentPage(1);
          }}
          className="rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500"
        >
          <option value="pending">Ch·ªù x√°c nh·∫≠n</option>
          <option value="confirmed">ƒê√£ x√°c nh·∫≠n</option>
          <option value="cancelled">ƒê√£ h·ªßy</option>
          <option value="completed">Ho√†n th√†nh</option>
          <option value="all">T·∫•t c·∫£</option>
        </select>
        <button
          onClick={() => {
            loadBookings();
            loadStats();
          }}
          className="px-3 py-1.5 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm"
        >
          üîÑ L√†m m·ªõi
        </button>
        <button
          onClick={() => setShowNewBookingForm(true)}
          className="px-3 py-1.5 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm"
        >
          ‚ûï T·∫°o booking m·ªõi
        </button>
        <div className="text-sm text-gray-400">
          T·ªïng: {total} booking
        </div>
      </div>

      {/* Bookings List */}
      {loading ? (
        <div className="text-center py-8">ƒêang t·∫£i...</div>
      ) : (
        <div className="space-y-4">
          {bookings.map((booking) => (
            <div key={booking._id} className="bg-gray-800 rounded-xl border border-gray-600 shadow-lg p-6">
              <div className="flex items-start justify-between mb-4">
                <div className="flex-1">
                  <div className="flex items-center gap-3 mb-2">
                    <h3 className="text-lg font-semibold text-white">
                      {booking.customer?.fullName || booking.customerInfo?.fullName || 'Kh√°ch h√†ng'}
                    </h3>
                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${getStatusColor(booking.status)}`}>
                      {getStatusText(booking.status)}
                    </span>
                  </div>
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-gray-300">
                    <div>
                      <span className="font-medium">B√†n:</span> {booking.table?.name || 'N/A'}
                    </div>
                    <div>
                      <span className="font-medium">S·ªë ng∆∞·ªùi:</span> {booking.numberOfGuests}
                    </div>
                    {booking.depositAmount > 0 && (
                      <div>
                        <span className="font-medium">üí∞ C·ªçc:</span> {booking.depositAmount.toLocaleString()}ƒë
                      </div>
                    )}
                    <div>
                      <span className="font-medium">Ng√†y:</span> {new Date(booking.bookingDate).toLocaleDateString('vi-VN')}
                    </div>
                    <div>
                      <span className="font-medium">Gi·ªù:</span> {booking.bookingTime}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-lg font-bold text-red-600">
                    {booking.totalAmount.toLocaleString()}ƒë
                  </div>
                  {booking.depositAmount > 0 && (
                    <div className="text-sm font-medium text-green-600">
                      üí∞ C·ªçc: {booking.depositAmount.toLocaleString()}ƒë
                    </div>
                  )}
                  <div className="text-sm text-gray-400">
                    {new Date(booking.createdAt).toLocaleString('vi-VN')}
                  </div>
                </div>
              </div>

              {/* Menu Items */}
              <div className="mb-4">
                <h4 className="font-medium text-white mb-2">M√≥n ƒë√£ ƒë·∫∑t:</h4>
                <div className="space-y-1">
                  {booking.menuItems.map((item, index) => (
                    <div key={index} className="flex justify-between text-sm">
                      <span>{item.item?.name || 'N/A'} x{item.quantity}</span>
                      <span className="font-medium">{(item.price * item.quantity).toLocaleString()}ƒë</span>
                    </div>
                  ))}
                </div>
                
                {/* T·ªïng ti·ªÅn v√† c·ªçc */}
                <div className="mt-3 pt-3 border-t border-gray-600">
                  <div className="flex justify-between text-sm font-medium">
                    <span>T·ªïng ti·ªÅn m√≥n:</span>
                    <span className="text-red-400">{booking.totalAmount.toLocaleString()}ƒë</span>
                  </div>
                  {booking.depositAmount > 0 && (
                    <div className="flex justify-between text-sm font-medium mt-1">
                      <span className="text-green-400">üí∞ Ti·ªÅn c·ªçc:</span>
                      <span className="text-green-400">{booking.depositAmount.toLocaleString()}ƒë</span>
                    </div>
                  )}
                </div>
              </div>

              {/* Contact Info */}
              <div className="mb-4 text-sm text-gray-300">
                <div><span className="font-medium">Email:</span> {booking.customer?.email || booking.customerInfo?.email || 'N/A'}</div>
                {(booking.customer?.phone || booking.customerInfo?.phone) && (
                  <div><span className="font-medium">Phone:</span> {booking.customer?.phone || booking.customerInfo?.phone}</div>
                )}
              </div>

              {/* Actions */}
              {booking.status === 'pending' && (
                <div className="flex gap-2">
                  <button
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      handleConfirm(booking._id);
                    }}
                    className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 text-sm font-medium cursor-pointer transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
                    type="button"
                  >
                    ‚úÖ X√°c nh·∫≠n
                  </button>
                  <button
                    onClick={() => handleCancel(booking._id)}
                    className="px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 text-sm font-medium"
                  >
                    H·ªßy
                  </button>
                </div>
              )}

              {booking.confirmedBy && (
                <div className="text-sm text-gray-400 mt-2">
                  X√°c nh·∫≠n b·ªüi: {booking.confirmedBy.fullName} - {new Date(booking.confirmedAt!).toLocaleString('vi-VN')}
                </div>
              )}
            </div>
          ))}

          {bookings.length === 0 && (
            <div className="text-center py-8 text-gray-400">
              Kh√¥ng c√≥ booking n√†o.
            </div>
          )}
        </div>
      )}

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="mt-6 flex justify-center">
          <div className="flex gap-2">
            <button
              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
              disabled={currentPage === 1}
              className="px-3 py-2 border border-gray-500 rounded-md text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 disabled:opacity-50"
            >
              Tr∆∞·ªõc
            </button>
            <span className="px-3 py-2 text-sm text-gray-700">
              {currentPage} / {totalPages}
            </span>
            <button
              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
              disabled={currentPage === totalPages}
              className="px-3 py-2 border border-gray-500 rounded-md text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 disabled:opacity-50"
            >
              Sau
            </button>
          </div>
        </div>
      )}

      {/* New Booking Form Modal */}
      {showNewBookingForm && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
            <h2 className="text-xl font-bold mb-4">T·∫°o booking m·ªõi</h2>
            
            {/* Th√¥ng b√°o h∆∞·ªõng d·∫´n */}
            <div className="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
              <div className="flex items-start">
                <div className="flex-shrink-0">
                  <svg className="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                  </svg>
                </div>
                <div className="ml-3">
                  <h3 className="text-sm font-medium text-blue-800">üí° H∆∞·ªõng d·∫´n</h3>
                  <div className="mt-1 text-sm text-blue-700">
                    <p>‚Ä¢ <strong>Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i</strong> ƒë·ªÉ t√¨m ki·∫øm kh√°ch h√†ng c√≥ s·∫µn trong h·ªá th·ªëng</p>
                    <p>‚Ä¢ N·∫øu t√¨m th·∫•y kh√°ch h√†ng, h·ªç s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o ri√™ng qua app</p>
                    <p>‚Ä¢ N·∫øu kh√¥ng t√¨m th·∫•y, s·∫Ω g·ª≠i th√¥ng b√°o chung cho t·∫•t c·∫£ kh√°ch h√†ng</p>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    S·ªë ƒëi·ªán tho·∫°i kh√°ch h√†ng *
                  </label>
                  <input
                    type="tel"
                    value={newBookingForm.customerPhone}
                    onChange={(e) => {
                      const phone = e.target.value;
                      console.log('üì± Phone input changed:', phone);
                      setNewBookingForm(prev => ({ ...prev, customerPhone: phone }));
                      searchCustomerByPhone(phone);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m ki·∫øm kh√°ch h√†ng..."
                  />
                  
                  {/* Hi·ªÉn th·ªã tr·∫°ng th√°i t√¨m ki·∫øm */}
                  {searching && (
                    <div className="mt-2 text-sm text-gray-500">ƒêang t√¨m ki·∫øm...</div>
                  )}
                  
         {/* Danh s√°ch kh√°ch h√†ng tr√πng SƒêT - Nh·ªè g·ªçn */}
         {showCustomerList && foundCustomers.length > 0 && (
           <div className="mt-3 bg-white rounded-lg shadow-md border border-gray-200">
             {/* Header */}
             <div className="bg-indigo-600 px-4 py-2 rounded-t-lg">
               <div className="flex items-center justify-between">
                 <div className="flex items-center">
                   <svg className="w-4 h-4 text-white mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z" />
                   </svg>
                   <span className="text-white font-medium text-sm">Ch·ªçn kh√°ch h√†ng ({foundCustomers.length})</span>
                 </div>
                 <button
                   type="button"
                   onClick={() => {
                     setFoundCustomers([]);
                     setShowCustomerList(false);
                     setNewBookingForm(prev => ({
                       ...prev,
                       customerId: '',
                       customerPhone: ''
                     }));
                   }}
                   className="text-white hover:bg-white/20 rounded p-1"
                 >
                   <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                   </svg>
                 </button>
               </div>
             </div>
             
             {/* Customer List */}
             <div className="p-3 max-h-48 overflow-y-auto">
               <div className="space-y-2">
                 {foundCustomers.map((customer, index) => (
                   <div 
                     key={customer._id}
                     className="group flex items-center p-2 bg-gray-50 hover:bg-indigo-50 rounded cursor-pointer transition-colors border border-gray-200 hover:border-indigo-300"
                     onClick={() => selectCustomer(customer)}
                   >
                     {/* Avatar */}
                     <div className="w-8 h-8 bg-indigo-500 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                       <span className="text-white font-bold text-xs">
                         {customer.fullName.charAt(0).toUpperCase()}
                       </span>
                     </div>
                     
                     {/* Info */}
                     <div className="flex-1 min-w-0">
                       <div className="flex items-center justify-between">
                         <div className="min-w-0 flex-1">
                           <h4 className="text-sm font-medium text-gray-900 truncate">
                             {customer.fullName}
                           </h4>
                           <p className="text-xs text-gray-500 truncate">
                             @{customer.username}
                           </p>
                         </div>
                         <div className="opacity-0 group-hover:opacity-100 transition-opacity ml-2">
                           <svg className="w-4 h-4 text-indigo-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                             <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                           </svg>
                         </div>
                       </div>
                       <div className="text-xs text-gray-500 truncate mt-1">
                         {customer.email} ‚Ä¢ {customer.phone}
                       </div>
                     </div>
                   </div>
                 ))}
               </div>
             </div>
           </div>
         )}

         {/* Th√¥ng tin kh√°ch h√†ng ƒë√£ ch·ªçn - Nh·ªè g·ªçn */}
         {foundCustomer && !showCustomerList && (
           <div className="mt-3 bg-white rounded-lg shadow-md border border-gray-200">
             {/* Header */}
             <div className="bg-emerald-600 px-4 py-2 rounded-t-lg">
               <div className="flex items-center justify-between">
                 <div className="flex items-center">
                   <svg className="w-4 h-4 text-white mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                   </svg>
                   <span className="text-white font-medium text-sm">Kh√°ch h√†ng ƒë√£ ch·ªçn</span>
                 </div>
                 <button
                   type="button"
                   onClick={() => {
                     setFoundCustomer(null);
                     setNewBookingForm(prev => ({
                       ...prev,
                       customerId: '',
                       customerPhone: ''
                     }));
                   }}
                   className="text-white hover:bg-white/20 rounded p-1"
                 >
                   <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                     <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                   </svg>
                 </button>
               </div>
             </div>
             
             {/* Customer Info */}
             <div className="p-3">
               <div className="flex items-center">
                 {/* Avatar */}
                 <div className="w-10 h-10 bg-indigo-500 rounded-full flex items-center justify-center mr-3 flex-shrink-0">
                   <span className="text-white font-bold text-sm">
                     {foundCustomer.fullName.charAt(0).toUpperCase()}
                   </span>
                 </div>
                 
                 {/* Info */}
                 <div className="flex-1 min-w-0">
                   <h4 className="text-sm font-semibold text-gray-900 truncate">{foundCustomer.fullName}</h4>
                   <p className="text-xs text-gray-500 truncate">@{foundCustomer.username}</p>
                   <div className="text-xs text-gray-500 truncate mt-1">
                     {foundCustomer.email} ‚Ä¢ {foundCustomer.phone}
                   </div>
                 </div>
               </div>
             </div>
           </div>
         )}
                  
                  {/* Th√¥ng b√°o kh√¥ng t√¨m th·∫•y - Nh·ªè g·ªçn */}
                  {!searching && newBookingForm.customerPhone && !foundCustomer && !showCustomerList && newBookingForm.customerPhone.length >= 10 && (
                    <div className="mt-3 bg-white rounded-lg shadow-md border border-gray-200">
                      <div className="bg-amber-500 px-4 py-2 rounded-t-lg">
                        <div className="flex items-center">
                          <svg className="w-4 h-4 text-white mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
                          </svg>
                          <span className="text-white font-medium text-sm">Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng</span>
                        </div>
                      </div>
                      <div className="p-3">
                        <p className="text-sm text-gray-600">S·∫Ω g·ª≠i th√¥ng b√°o chung cho kh√°ch h√†ng m·ªõi</p>
                      </div>
                    </div>
                  )}
                </div>


                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Ch·ªçn b√†n *
                  </label>
                  <select
                    value={newBookingForm.tableId}
                    onChange={(e) => setNewBookingForm(prev => ({ ...prev, tableId: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="">Ch·ªçn b√†n</option>
                    {tables.filter(table => table.status === 'empty').map((table) => (
                      <option key={table._id} value={table._id}>
                        B√†n {table.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    S·ªë kh√°ch *
                  </label>
                  <input
                    type="number"
                    min="1"
                    max="20"
                    value={newBookingForm.numberOfGuests}
                    onChange={(e) => setNewBookingForm(prev => ({ ...prev, numberOfGuests: parseInt(e.target.value) || 1 }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Ng√†y ƒë·∫∑t b√†n *
                  </label>
                  <input
                    type="date"
                    value={newBookingForm.bookingDate}
                    onChange={(e) => setNewBookingForm(prev => ({ ...prev, bookingDate: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Gi·ªù ƒë·∫∑t b√†n *
                  </label>
                  <input
                    type="time"
                    value={newBookingForm.bookingTime}
                    onChange={(e) => setNewBookingForm(prev => ({ ...prev, bookingTime: e.target.value }))}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  Y√™u c·∫ßu ƒë·∫∑c bi·ªát
                </label>
                <textarea
                  value={newBookingForm.specialRequests}
                  onChange={(e) => setNewBookingForm(prev => ({ ...prev, specialRequests: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  rows={3}
                  placeholder="Nh·∫≠p y√™u c·∫ßu ƒë·∫∑c bi·ªát (n·∫øu c√≥)"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-1">
                  S·ªë ti·ªÅn c·ªçc (VND)
                </label>
                <button
                  type="button"
                  onClick={() => setShowDepositModal(true)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-left flex justify-between items-center"
                >
                  <span className={newBookingForm.depositAmount ? 'text-gray-900' : 'text-gray-500'}>
                    {newBookingForm.depositAmount ? `${parseInt(newBookingForm.depositAmount).toLocaleString()}ƒë` : 'Ch·ªçn s·ªë ti·ªÅn c·ªçc'}
                  </span>
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
                  </svg>
                </button>
                {newBookingForm.depositAmount && (
                  <button
                    type="button"
                    onClick={handleDepositClear}
                    className="mt-2 text-sm text-red-600 hover:text-red-800 flex items-center"
                  >
                    <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                    </svg>
                    X√≥a
                  </button>
                )}
                <p className="text-xs text-gray-500 mt-1">
                  üí° S·ªë ti·ªÅn c·ªçc s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã trong m·ª•c thanh to√°n b√†n
                </p>
              </div>
            </div>

            <div className="flex gap-2 mt-6">
              <button
                onClick={() => setShowNewBookingForm(false)}
                className="flex-1 px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
              >
                H·ªßy
              </button>
              <button
                onClick={createNewBooking}
                className="flex-1 px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
              >
                T·∫°o booking
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal ch·ªçn s·ªë ti·ªÅn c·ªçc */}
      {showDepositModal && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-end justify-center z-50">
          <div className="bg-white rounded-t-xl w-full max-w-md">
            <div className="flex justify-between items-center p-4 border-b border-gray-200">
              <h3 className="text-lg font-semibold text-gray-900">Ch·ªçn s·ªë ti·ªÅn c·ªçc</h3>
              <button
                onClick={() => setShowDepositModal(false)}
                className="text-gray-400 hover:text-gray-600"
              >
                <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              </button>
            </div>
            
            <div className="p-4 space-y-2">
              {depositOptions.map((option) => (
                <button
                  key={option.value}
                  onClick={() => handleDepositSelect(option.value)}
                  className="w-full flex justify-between items-center p-3 bg-gray-50 hover:bg-gray-100 rounded-lg border border-gray-200 transition-colors"
                >
                  <span className="text-gray-900 font-medium">{option.label}</span>
                  <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                  </svg>
                </button>
              ))}
              
              <button
                onClick={handleDepositClear}
                className="w-full flex items-center justify-center p-3 bg-red-50 hover:bg-red-100 rounded-lg border border-red-200 transition-colors"
              >
                <svg className="w-5 h-5 text-red-500 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
                <span className="text-red-600 font-medium">Kh√¥ng c·ªçc</span>
              </button>
            </div>
          </div>
        </div>
      )}

      {/* Modal thanh to√°n c·ªçc */}
      {depositPaymentData && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-md">
            <h3 className="text-lg font-semibold mb-4">Thanh to√°n c·ªçc</h3>
            <p className="text-gray-600 mb-4">
              B√†n {depositPaymentData.tableId} - S·ªë ti·ªÅn: {depositPaymentData.depositAmount.toLocaleString()}ƒë
            </p>
            <div className="flex gap-2">
              <button
                onClick={() => {
                  setShowDepositPaymentModal(false);
                  setDepositPaymentData(null);
                }}
                className="px-4 py-2 bg-gray-600 text-white rounded-md hover:bg-gray-700"
              >
                H·ªßy
              </button>
              <button
                onClick={() => {
                  setShowDepositPaymentModal(false);
                  setDepositPaymentData(null);
                  loadBookings();
                  loadStats();
                  toast.success('üéâ B√†n ƒë√£ ƒë∆∞·ª£c c·ªçc th√†nh c√¥ng!');
                }}
                className="px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700"
              >
                X√°c nh·∫≠n
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}











// --- Tables Admin ---
type Table = { _id: string; name: string; status: 'empty'|'occupied'; note?: string };

function TablesAdmin() {
  const API = import.meta.env.VITE_API_URL || 'http://localhost:5000';
  const [items, setItems] = useState<Table[]>([]);
  const [loading, setLoading] = useState(false);
  const [filter, setFilter] = useState<'all'|'empty'|'occupied'>('all');
  const [open, setOpen] = useState(false);
  const [form, setForm] = useState<Pick<Table,'name'|'note'>>({ name: '', note: '' });
  const [detailOpen, setDetailOpen] = useState(false);
  const [detailFor, setDetailFor] = useState<Table | null>(null);
  const [detailOrder, setDetailOrder] = useState<{ items: { name: string; price: number; quantity: number }[] } | null>(null);
  const [detailLoading, setDetailLoading] = useState(false);
  
  const [depositPaymentData, setDepositPaymentData] = useState<{
    tableId: string;
    depositAmount: number;
    bookingId: string;
  } | null>(null);

  async function load() {
    setLoading(true);
    try {
      const qs = filter==='all' ? '' : `?status=${filter}`;
      const res = await axios.get<Table[]>(`${API}/api/tables${qs}`);
      setItems(res.data);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, [filter]);

  async function create() {
    await axios.post(`${API}/api/tables`, form);
    setOpen(false);
    setForm({ name: '', note: '' });
    await load();
  }

  async function remove(id: string) {
    if (!confirm('X√≥a b√†n n√†y?')) return;
    await axios.delete(`${API}/api/tables/${id}`);
    await load();
  }

  async function toggle(id: string, status: 'empty'|'occupied') {
    if (status === 'empty') {
      // Nh·∫≠n b√†n
      await axios.post(`${API}/api/tables/${id}/occupy`);
      toast.success('ƒê√£ nh·∫≠n b√†n th√†nh c√¥ng!');
    } else {
      // Tr·∫£ b√†n - c·∫ßn x√°c nh·∫≠n
      if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tr·∫£ b√†n n√†y? T·∫•t c·∫£ d·ªØ li·ªáu m√≥n ƒÉn/n∆∞·ªõc s·∫Ω b·ªã x√≥a!')) return;
      
      try {
        const response = await axios.post(`${API}/api/tables/${id}/free`);
        const deletedCount = response.data.deletedOrdersCount || 0;
        toast.success(`ƒê√£ tr·∫£ b√†n th√†nh c√¥ng! X√≥a ${deletedCount} m√≥n ƒÉn/n∆∞·ªõc.`);
      } catch (error) {
        console.error('Error freeing table:', error);
        toast.error('C√≥ l·ªói x·∫£y ra khi tr·∫£ b√†n!');
        return;
      }
    }
    await load();
  }

  async function resetAllTables() {
    const occupiedCount = items.filter(t => t.status === 'occupied').length;
    
    if (occupiedCount === 0) {
      toast.info('Kh√¥ng c√≥ b√†n n√†o ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ reset!');
      return;
    }
    
    if (!confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën tr·∫£ ${occupiedCount} b√†n? T·∫•t c·∫£ d·ªØ li·ªáu m√≥n ƒÉn/n∆∞·ªõc s·∫Ω b·ªã x√≥a!`)) return;
    
    try {
      setLoading(true);
      
      // G·ªçi API reset t·∫•t c·∫£ b√†n
      const response = await axios.post(`${API}/api/tables/reset-all`);
      
      if (response.data.success) {
        if (response.data.resetCount > 0) {
          toast.success(`ƒê√£ tr·∫£ ${response.data.resetCount} b√†n th√†nh c√¥ng! X√≥a ${response.data.deletedOrdersCount} m√≥n ƒÉn/n∆∞·ªõc.`);
        } else {
          toast.info(response.data.message);
        }
        await load();
      } else {
        toast.error(response.data.message || 'C√≥ l·ªói x·∫£y ra khi tr·∫£ b√†n!');
      }
    } catch (error: any) {
      console.error('Error resetting tables:', error);
      const errorMessage = error.response?.data?.error || error.message || 'C√≥ l·ªói x·∫£y ra khi tr·∫£ b√†n!';
      toast.error(errorMessage);
    } finally {
      setLoading(false);
    }
  }

  async function openDetails(t: Table) {
    setDetailFor(t);
    setDetailOrder(null);
    setDetailOpen(true);
    setDetailLoading(true);
    try {
      const res = await axios.get(`${API}/api/orders/by-table/${t._id}`);
      setDetailOrder(res.data || { items: [] });
    } finally {
      setDetailLoading(false);
    }
  }

  return (
    <div>
      <div className="flex items-center gap-2 mb-4">
        <div className="inline-flex rounded-md border border-gray-600 overflow-hidden">
          {(['all','empty','occupied'] as const).map(k => (
            <button key={k} onClick={()=>setFilter(k as 'all'|'empty'|'occupied')} className={`px-3 py-1.5 rounded-md transition-colors ${filter===k?'bg-red-600 text-white':'bg-gray-700 text-gray-300 hover:bg-gray-600'}`}>{k==='all'?'T·∫•t c·∫£':k==='empty'?'B√†n tr·ªëng':'ƒêang d√πng'}</button>
          ))}
        </div>
        <div className="ml-auto flex gap-2">
          <button 
            onClick={resetAllTables} 
            disabled={loading || items.filter(t => t.status === 'occupied').length === 0}
            className="inline-flex items-center gap-2 bg-orange-600 text-white px-3 py-2 rounded-md hover:bg-orange-700 disabled:bg-gray-400 disabled:cursor-not-allowed"
          >
            üîÑ Tr·∫£ t·∫•t c·∫£ b√†n
          </button>
          <button onClick={()=>setOpen(true)} className="inline-flex items-center gap-2 bg-red-600 text-white px-3 py-2 rounded-md hover:bg-red-700">
            <PlusIcon className="w-5 h-5" /> T·∫°o b√†n
          </button>
        </div>
      </div>

      {loading ? <div>ƒêang t·∫£i...</div> : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {items.map(t => (
            <div key={t._id} className="bg-gray-800 rounded-xl border border-gray-600 shadow-lg p-4">
              <div className="flex items-start justify-between">
                <div>
                  <div className="font-semibold text-white">{t.name} <span className="text-gray-400">#{t._id}</span></div>
                  {t.note && <div className="text-sm text-gray-300">{t.note}</div>}
                </div>
                <span className={`text-xs px-2 py-0.5 rounded ${t.status==='empty'?'bg-green-600 text-green-100':'bg-amber-600 text-amber-100'}`}>
                  {t.status==='empty'?'B√†n tr·ªëng':'ƒêang d√πng'}
                </span>
              </div>
              <div className="flex items-center gap-2 mt-3">
                <button onClick={()=>openDetails(t)} className="px-3 py-1.5 rounded-md border border-gray-500 text-gray-300 hover:bg-gray-700 hover:text-white transition-colors">Th√¥ng tin b√†n</button>
                {t.status !== 'empty' && (
                  <button onClick={()=>toggle(t._id, t.status)} className="px-3 py-1.5 rounded-md border border-red-500 text-red-300 hover:bg-red-600 hover:text-white transition-colors">
                    Tr·∫£ b√†n
                  </button>
                )}
                <button onClick={()=>remove(t._id)} className="ml-auto p-2 rounded hover:bg-gray-700 text-gray-300 hover:text-white transition-colors">
                  <TrashIcon className="w-5 h-5 text-red-400" />
                </button>
              </div>
            </div>
          ))}
          {!items.length && <div className="text-gray-400">Kh√¥ng c√≥ b√†n.</div>}
        </div>
      )}

      <Dialog open={open} onClose={()=>setOpen(false)} className="relative z-50">
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel className="mx-auto w-full max-w-md rounded-xl bg-gray-800 p-6 space-y-4">
            <Dialog.Title className="text-lg font-semibold">T·∫°o b√†n</Dialog.Title>
            <div className="space-y-3">
              <div>
                <label className="text-sm">T√™n b√†n</label>
                <input className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={form.name} onChange={e=>setForm(f=>({ ...f, name: e.target.value }))} placeholder="V√≠ d·ª•: B√†n 1" />
              </div>
              <div>
                <label className="text-sm">Ghi ch√∫</label>
                <input className="mt-1 w-full rounded-md border-gray-300 focus:border-red-500 focus:ring-red-500" value={form.note ?? ''} onChange={e=>setForm(f=>({ ...f, note: e.target.value }))} />
              </div>
            </div>
            <div className="flex justify-end gap-3 pt-2">
              <button onClick={()=>setOpen(false)} className="px-4 py-2 rounded-md border border-gray-500 text-gray-300 bg-gray-700 hover:bg-gray-600">H·ªßy</button>
              <button onClick={create} className="px-4 py-2 rounded-md bg-green-600 text-white hover:bg-green-700">T·∫°o</button>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>

      {/* Detail dialog */}
      <Dialog open={detailOpen} onClose={()=>setDetailOpen(false)} className="relative z-50">
        <div className="fixed inset-0 bg-black/30" aria-hidden="true" />
        <div className="fixed inset-0 flex items-center justify-center p-4">
          <Dialog.Panel className="mx-auto w-full max-w-lg rounded-xl bg-gray-800 p-6 space-y-4">
            <Dialog.Title className="text-lg font-semibold">Th√¥ng tin b√†n {detailFor ? detailFor.name : ''} {detailFor ? `#${detailFor._id}` : ''}</Dialog.Title>
            {detailLoading ? (
              <div>ƒêang t·∫£i...</div>
            ) : (
              <div className="space-y-3">
                {(detailOrder?.items?.length ?? 0) === 0 ? (
                  <div className="text-gray-400">Ch∆∞a c√≥ m√≥n n√†o ƒë∆∞·ª£c order.</div>
                ) : (
                  <div className="divide-y">
                    {detailOrder!.items.map((it, idx) => (
                      <div key={idx} className="py-2 flex items-center">
                        <div className="flex-1">{it.name}</div>
                        <div className="w-16 text-right">x{it.quantity}</div>
                        <div className="w-28 text-right">{(it.price * it.quantity).toLocaleString()}ƒë</div>
                      </div>
                    ))}
                    <div className="pt-3 flex items-center font-semibold">
                      <div className="flex-1">T·ªïng</div>
                      <div className="w-16" />
                      <div className="w-28 text-right">{detailOrder!.items.reduce((s, x)=> s + x.price*x.quantity, 0).toLocaleString()}ƒë</div>
                    </div>
                  </div>
                )}
              </div>
            )}
            <div className="flex justify-end">
              <button onClick={()=>setDetailOpen(false)} className="px-4 py-2 rounded-md border">ƒê√≥ng</button>
            </div>
          </Dialog.Panel>
        </div>
      </Dialog>
    </div>
  );
}






  





