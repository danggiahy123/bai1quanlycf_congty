const mongoose = require('mongoose');
require('dotenv').config();

const Ingredient = require('./src/models/Ingredient');
const InventoryTransaction = require('./src/models/InventoryTransaction');

async function createTestData() {
  try {
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/cafe_app');
    console.log('‚úÖ Connected to MongoDB');

    // X√≥a d·ªØ li·ªáu c≈©
    await Ingredient.deleteMany({ name: '·∫æch' });
    await InventoryTransaction.deleteMany({});

    // T·∫°o nguy√™n li·ªáu ·∫øch
    const frog = new Ingredient({
      name: '·∫æch',
      category: 'food',
      unit: 'con',
      currentStock: 12, // H√¥m nay c√≤n 12 con
      minStockLevel: 5,
      maxStockLevel: 30,
      unitPrice: 15000,
      supplier: 'Nh√† cung c·∫•p ·∫øch t∆∞∆°i',
      notes: '·∫æch t∆∞∆°i s·ªëng',
      isActive: true
    });

    await frog.save();
    console.log('‚úÖ T·∫°o nguy√™n li·ªáu ·∫øch th√†nh c√¥ng');

    // T·∫°o giao d·ªãch ki·ªÉm kho h√¥m qua (c√≤n 15 con)
    const yesterdayCheck = new InventoryTransaction({
      ingredient: frog._id,
      transactionType: 'adjustment',
      quantity: 0,
      unitPrice: 15000,
      totalAmount: 0,
      previousStock: 15,
      newStock: 15,
      reference: 'STOCK_CHECK_2024-12-26',
      referenceId: new mongoose.Types.ObjectId(),
      reason: 'stock_check',
      notes: 'Ki·ªÉm kho h√¥m qua - c√≤n 15 con',
      performedBy: new mongoose.Types.ObjectId(),
      performedByName: 'Admin',
      department: 'warehouse',
      createdAt: new Date('2024-12-26T18:00:00Z') // H√¥m qua
    });

    await yesterdayCheck.save();
    console.log('‚úÖ T·∫°o ki·ªÉm kho h√¥m qua (15 con)');

    // C·∫≠p nh·∫≠t nguy√™n li·ªáu ƒë·ªÉ c√≥ currentStock = 12 (h√¥m nay x√†i 3 con)
    frog.currentStock = 12;
    await frog.save();
    console.log('‚úÖ C·∫≠p nh·∫≠t t·ªìn kho h√¥m nay (12 con)');

    console.log('\nüéØ D·ªØ li·ªáu test ƒë√£ ƒë∆∞·ª£c t·∫°o:');
    console.log('üìÖ H√¥m qua: 15 con ·∫øch');
    console.log('üìÖ H√¥m nay: 12 con ·∫øch');
    console.log('üìä B·∫£ng so s√°nh s·∫Ω hi·ªÉn th·ªã:');
    console.log('‚Ä¢ NGUY√äN LI·ªÜU: ·∫æch');
    console.log('‚Ä¢ TRONG KHO C√íN: 12 con');
    console.log('‚Ä¢ H√îM NAY X√ÄI: 3 con (15 - 12 = 3)');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ Ho√†n th√†nh! H√£y ki·ªÉm tra b·∫£ng so s√°nh.');
  }
}

createTestData();
