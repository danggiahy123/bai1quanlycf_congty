const mongoose = require('mongoose');
require('dotenv').config();

const Ingredient = require('./src/models/Ingredient');
const InventoryTransaction = require('./src/models/InventoryTransaction');

async function createTestData() {
  try {
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/cafe_app');
    console.log('Connected to MongoDB');

    // X√≥a d·ªØ li·ªáu c≈©
    await Ingredient.deleteMany({ name: '·∫æch' });
    await InventoryTransaction.deleteMany({});

    // T·∫°o nguy√™n li·ªáu ·∫øch
    const frog = new Ingredient({
      name: '·∫æch',
      category: 'food',
      unit: 'con',
      currentStock: 15,
      minStockLevel: 5,
      maxStockLevel: 30,
      unitPrice: 15000,
      supplier: 'Nh√† cung c·∫•p ·∫øch t∆∞∆°i',
      notes: '·∫æch t∆∞∆°i s·ªëng',
      lastImportDate: new Date('2024-12-27T08:00:00Z'),
      lastImportQuantity: 5,
      lastImportPrice: 15000,
      isActive: true
    });

    await frog.save();
    console.log('‚úÖ T·∫°o nguy√™n li·ªáu ·∫øch th√†nh c√¥ng');

    // T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 2 (20 con)
    const import1 = new InventoryTransaction({
      ingredient: frog._id,
      transactionType: 'import',
      quantity: 20,
      unitPrice: 15000,
      totalAmount: 300000,
      previousStock: 0,
      newStock: 20,
      reference: 'IMPORT_2024-12-23',
      referenceId: new mongoose.Types.ObjectId(),
      reason: 'import',
      notes: 'Nh·∫≠p h√†ng th·ª© 2 - 20 con ·∫øch',
      performedBy: new mongoose.Types.ObjectId(),
      performedByName: 'Admin',
      department: 'warehouse',
      createdAt: new Date('2024-12-23T08:00:00Z')
    });

    await import1.save();
    console.log('‚úÖ T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 2 (20 con)');

    // T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 6 (5 con)
    const import2 = new InventoryTransaction({
      ingredient: frog._id,
      transactionType: 'import',
      quantity: 5,
      unitPrice: 15000,
      totalAmount: 75000,
      previousStock: 10,
      newStock: 15,
      reference: 'IMPORT_2024-12-27',
      referenceId: new mongoose.Types.ObjectId(),
      reason: 'import',
      notes: 'Nh·∫≠p h√†ng th·ª© 6 - 5 con ·∫øch',
      performedBy: new mongoose.Types.ObjectId(),
      performedByName: 'Admin',
      department: 'warehouse',
      createdAt: new Date('2024-12-27T08:00:00Z')
    });

    await import2.save();
    console.log('‚úÖ T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 6 (5 con)');

    // T·∫°o giao d·ªãch ki·ªÉm kho th·ª© 5 (c√≤n 10 con)
    const stockCheck = new InventoryTransaction({
      ingredient: frog._id,
      transactionType: 'adjustment',
      quantity: -10,
      unitPrice: 15000,
      totalAmount: -150000,
      previousStock: 20,
      newStock: 10,
      reference: 'STOCK_CHECK_2024-12-26',
      referenceId: new mongoose.Types.ObjectId(),
      reason: 'stock_check',
      notes: 'Ki·ªÉm kho th·ª© 5 - ƒë√£ b√°n 10 con t·ª´ th·ª© 2',
      performedBy: new mongoose.Types.ObjectId(),
      performedByName: 'Admin',
      department: 'warehouse',
      createdAt: new Date('2024-12-26T18:00:00Z')
    });

    await stockCheck.save();
    console.log('‚úÖ T·∫°o giao d·ªãch ki·ªÉm kho th·ª© 5');

    console.log('\nüéØ D·ªØ li·ªáu test ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
    console.log('H√£y v√†o webadmin ƒë·ªÉ ki·ªÉm tra b·∫£ng so s√°nh.');

  } catch (error) {
    console.error('‚ùå L·ªói:', error);
  } finally {
    await mongoose.disconnect();
  }
}

createTestData();
