const axios = require('axios');

const API_URL = 'http://localhost:5000';

async function verifyUnlimitedGuests() {
  console.log('üîç Verify Unlimited Guests Storage\n');

  try {
    // ƒêƒÉng nh·∫≠p
    const loginResponse = await axios.post(`${API_URL}/api/customers/login`, {
      username: 'unlimited_test',
      password: '123123'
    });

    const token = loginResponse.data.token;
    console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng');

    // Test v·ªõi s·ªë kh√°ch l·ªõn
    const testGuests = 999;
    console.log(`\nüìä Test v·ªõi ${testGuests} kh√°ch:`);

    // L·∫•y b√†n v√† menu
    const tablesResponse = await axios.get(`${API_URL}/api/tables`);
    const menuResponse = await axios.get(`${API_URL}/api/menu`);
    
    // T√¨m b√†n tr·ªëng
    const availableTable = tablesResponse.data.find(table => table.status === 'empty') || tablesResponse.data[0];
    const firstMenuItem = menuResponse.data[0];

    if (!availableTable || !firstMenuItem) {
      throw new Error('Kh√¥ng c√≥ b√†n ho·∫∑c menu');
    }

    console.log(`ü™ë S·ª≠ d·ª•ng b√†n: ${availableTable.name}`);

    // T·∫°o booking v·ªõi s·ªë kh√°ch l·ªõn
    const bookingData = {
      tableId: availableTable._id,
      numberOfGuests: testGuests,
      bookingDate: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // 1 tu·∫ßn sau
      bookingTime: '18:00',
      menuItems: [{
        itemId: firstMenuItem._id,
        quantity: Math.ceil(testGuests / 2)
      }],
      notes: `Test ${testGuests} kh√°ch - Unlimited`
    };

    console.log('üìù T·∫°o booking...');
    const bookingResponse = await axios.post(`${API_URL}/api/bookings`, bookingData, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      }
    });

    if (bookingResponse.data.success || bookingResponse.data.message?.includes('th√†nh c√¥ng')) {
      console.log('‚úÖ Booking t·∫°o th√†nh c√¥ng!');
      
      // Ki·ªÉm tra s·ªë kh√°ch ƒë√£ l∆∞u
      console.log('üîç Ki·ªÉm tra s·ªë kh√°ch ƒë√£ l∆∞u...');
      const checkResponse = await axios.get(`${API_URL}/api/bookings/${bookingResponse.data.booking._id}`, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });
      
      const savedGuests = checkResponse.data.numberOfGuests;
      console.log(`üìä S·ªë kh√°ch ƒë√£ l∆∞u: ${savedGuests}`);
      
      if (savedGuests === testGuests) {
        console.log('‚úÖ TH√ÄNH C√îNG: S·ªë kh√°ch ƒë∆∞·ª£c l∆∞u ch√≠nh x√°c!');
        console.log(`‚úÖ X√°c nh·∫≠n: ${testGuests} kh√°ch = ${savedGuests} kh√°ch`);
      } else {
        console.log('‚ùå L·ªñI: S·ªë kh√°ch kh√¥ng kh·ªõp!');
        console.log(`‚ùå Expected: ${testGuests}, Got: ${savedGuests}`);
      }
      
      // Hi·ªÉn th·ªã th√¥ng tin booking
      console.log('\nüìã Th√¥ng tin booking:');
      console.log(`   ID: ${checkResponse.data._id}`);
      console.log(`   B√†n: ${checkResponse.data.table.name}`);
      console.log(`   S·ªë kh√°ch: ${checkResponse.data.numberOfGuests}`);
      console.log(`   Ng√†y: ${checkResponse.data.bookingDate}`);
      console.log(`   Gi·ªù: ${checkResponse.data.bookingTime}`);
      console.log(`   Tr·∫°ng th√°i: ${checkResponse.data.status}`);
      
      // Cleanup
      console.log('\nüßπ D·ªçn d·∫πp...');
      try {
        await axios.delete(`${API_URL}/api/bookings/${bookingResponse.data.booking._id}`, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        });
        console.log('‚úÖ ƒê√£ x√≥a booking test');
      } catch (cleanupError) {
        console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a booking test');
      }
      
    } else {
      console.log('‚ùå T·∫°o booking th·∫•t b·∫°i:', bookingResponse.data.message);
    }

  } catch (error) {
    console.error('‚ùå Test failed:', error.response?.data?.message || error.message);
  }
}

verifyUnlimitedGuests();
