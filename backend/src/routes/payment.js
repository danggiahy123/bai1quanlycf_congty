const express = require('express');
const mongoose = require('mongoose');
const TransactionHistory = require('../models/TransactionHistory');
const Booking = require('../models/Booking');
const Table = require('../models/Table');
const Notification = require('../models/Notification');

const router = express.Router();

// L·∫•y danh s√°ch ng√¢n h√†ng
router.get('/banks', async (req, res) => {
  try {
    // Danh s√°ch ng√¢n h√†ng Vi·ªát Nam
    const banks = [
      {
        id: 1,
        name: 'Ng√¢n h√†ng TMCP K·ªπ th∆∞∆°ng Vi·ªát Nam',
        code: 'TCB',
        bin: '970407',
        shortName: 'Techcombank',
        logo: 'https://img.vietqr.io/2021/TCB.png',
        transferSupported: 1,
        lookupSupported: 1
      },
      {
        id: 2,
        name: 'Ng√¢n h√†ng TMCP √Å Ch√¢u',
        code: 'ACB',
        bin: '970416',
        shortName: 'ACB',
        logo: 'https://img.vietqr.io/2021/ACB.png',
        transferSupported: 1,
        lookupSupported: 1
      },
      {
        id: 3,
        name: 'Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam',
        code: 'BID',
        bin: '970418',
        shortName: 'BIDV',
        logo: 'https://img.vietqr.io/2021/BID.png',
        transferSupported: 1,
        lookupSupported: 1
      }
    ];

    res.json({
      success: true,
      data: banks
    });
  } catch (error) {
    console.error('Error fetching banks:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y danh s√°ch ng√¢n h√†ng' 
    });
  }
});

// T·∫°o QR code thanh to√°n
router.post('/generate-qr', async (req, res) => {
  try {
    const { accountNumber, accountName, bankCode, amount, description } = req.body;

    if (!accountNumber || !accountName || !bankCode || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'
      });
    }

    // T·∫°o QR code s·ª≠ d·ª•ng VietQR API v·ªõi c√∫ ph√°p ƒë√∫ng
    const qrData = {
      accountNumber,
      accountName,
      bankCode,
      amount: parseInt(amount),
      description
    };
    
    // S·ª≠ d·ª•ng VietQR API v·ªõi c√∫ ph√°p ƒë√∫ng
    // https://img.vietqr.io/image/<BANK_ID>-<ACCOUNT_NO>-<TEMPLATE>.png?amount=<AMOUNT>&addInfo=<DESCRIPTION>&accountName=<ACCOUNT_NAME>
    const qrCodeUrl = `https://img.vietqr.io/image/${bankCode}-${accountNumber}-compact2.png?amount=${amount}&addInfo=${encodeURIComponent(description)}&accountName=${encodeURIComponent(accountName)}`;

    console.log('üîó T·∫°o VietQR v·ªõi th√¥ng tin:', qrData);
    console.log('üîó VietQR URL:', qrCodeUrl);

    res.json({
      success: true,
      data: {
        qrCode: qrCodeUrl,
        accountNumber,
        accountName,
        bankCode,
        amount: parseInt(amount),
        description
      }
    });
  } catch (error) {
    console.error('Error generating QR code:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi t·∫°o QR code' 
    });
  }
});

// Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n
router.get('/check-status/:bookingId', async (req, res) => {
  try {
    const { bookingId } = req.params;

    console.log('üîç Ki·ªÉm tra tr·∫°ng th√°i thanh to√°n cho booking:', bookingId);

    if (!bookingId) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin booking ID'
      });
    }

    // T√¨m booking
    const booking = await Booking.findById(bookingId);
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y booking'
      });
    }

    // Ki·ªÉm tra xem c√≥ giao d·ªãch thanh to√°n th√†nh c√¥ng ch∆∞a
    const completedTransaction = await TransactionHistory.findOne({
      bookingId: bookingId,
      transactionType: 'deposit',
      status: 'completed'
    });

    if (completedTransaction) {
      return res.json({
        success: true,
        data: {
          paid: true,
          status: 'completed',
          transactionId: completedTransaction._id,
          amount: completedTransaction.amount,
          paidAt: completedTransaction.paidAt,
          bookingId: bookingId
        }
      });
    }

    // Ki·ªÉm tra xem c√≥ giao d·ªãch ƒëang ch·ªù x√°c nh·∫≠n kh√¥ng
    const pendingTransaction = await TransactionHistory.findOne({
      bookingId: bookingId,
      transactionType: 'deposit',
      status: 'pending'
    });

    if (pendingTransaction) {
      return res.json({
        success: true,
        data: {
          paid: false,
          status: 'pending',
          transactionId: pendingTransaction._id,
          amount: pendingTransaction.amount,
          bookingId: bookingId
        }
      });
    }

    // Ch∆∞a c√≥ giao d·ªãch n√†o
    return res.json({
      success: true,
      data: {
        paid: false,
        status: 'not_paid',
        bookingId: bookingId,
        amount: booking.depositAmount
      }
    });

  } catch (error) {
    console.error('Error checking payment status:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi ki·ªÉm tra tr·∫°ng th√°i thanh to√°n' 
    });
  }
});

// Ki·ªÉm tra thanh to√°n - CH·ªà ADMIN M·ªöI C√ì TH·ªÇ X√ÅC NH·∫¨N
router.post('/check-payment', async (req, res) => {
  try {
    const { bookingId, amount, transactionType = 'deposit' } = req.body;

    console.log('üîç Ki·ªÉm tra thanh to√°n:', { bookingId, amount, transactionType });

    if (!bookingId || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin booking ho·∫∑c s·ªë ti·ªÅn'
      });
    }

    // T√¨m booking
    const booking = await Booking.findById(bookingId);
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y booking'
      });
    }

    // LU√îN TR·∫¢ V·ªÄ FALSE - CH·ªà ADMIN M·ªöI C√ì TH·ªÇ X√ÅC NH·∫¨N THANH TO√ÅN
    console.log('‚ùå H·ªá th·ªëng kh√¥ng th·ªÉ t·ª± ƒë·ªông ki·ªÉm tra thanh to√°n ng√¢n h√†ng');
    console.log('‚ùå Ch·ªâ admin m·ªõi c√≥ th·ªÉ x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng');
    
    return res.json({
      success: true,
      message: 'CH∆ØA NH·∫¨N TI·ªÄN - Vui l√≤ng chuy·ªÉn kho·∫£n v√† nh·∫•n "ƒê√É THANH TO√ÅN" ƒë·ªÉ x√°c nh·∫≠n',
      data: {
        isPaid: false,
        status: 'not_paid',
        bookingId: bookingId,
        amount: amount,
        transactionType: transactionType
      }
    });

  } catch (error) {
    console.error('Error checking payment:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi ki·ªÉm tra thanh to√°n' 
    });
  }
});

// API x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng cho nh√¢n vi√™n
router.post('/confirm-manual/:bookingId', async (req, res) => {
  try {
    const { bookingId } = req.params;
    const { amount, transactionType = 'deposit' } = req.body;

    console.log('üîß Nh√¢n vi√™n x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng:', { bookingId, amount, transactionType });

    if (!bookingId) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin booking ID'
      });
    }

    // T√¨m booking
    const booking = await Booking.findById(bookingId);
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y booking'
      });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ giao d·ªãch thanh to√°n th√†nh c√¥ng ch∆∞a
    const existingTransaction = await TransactionHistory.findOne({
      bookingId: bookingId,
      transactionType: transactionType,
      status: 'completed'
    });

    if (existingTransaction) {
      return res.json({
        success: true,
        message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥',
        data: {
          transactionId: existingTransaction._id,
          status: 'already_confirmed'
        }
      });
    }

    // T·∫°o giao d·ªãch thanh to√°n th√†nh c√¥ng
    const transaction = new TransactionHistory({
      bookingId: booking._id,
      tableId: booking.table,
      tableName: `B√†n ${booking.table}`,
      customerId: booking.customer,
      customerInfo: booking.customerInfo,
      transactionType: transactionType,
      amount: amount || booking.depositAmount,
      paymentMethod: 'manual_confirmation',
      status: 'completed',
      bankInfo: {
        accountNumber: '2246811357',
        accountName: 'DANG GIA HY',
        bankName: 'Techcombank',
        bankCode: '970407'
      },
      transactionId: 'MANUAL_' + Date.now(),
      paidAt: new Date(),
      confirmedAt: new Date(),
      processedBy: 'employee',
      processedByName: 'Nh√¢n vi√™n',
      notes: `Thanh to√°n ${transactionType === 'deposit' ? 'c·ªçc' : 'ƒë∆°n h√†ng'} b√†n ${booking.table} - X√°c nh·∫≠n th·ªß c√¥ng b·ªüi nh√¢n vi√™n`
    });

    await transaction.save();
    console.log('‚úÖ ƒê√£ t·∫°o giao d·ªãch thanh to√°n th·ªß c√¥ng:', transaction._id);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i booking
    booking.status = 'confirmed';
    await booking.save();

    // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng khi thanh to√°n c·ªçc th√†nh c√¥ng
    if (transactionType === 'deposit' && booking.customer) {
      try {
        const customerNotification = new Notification({
          user: booking.customer,
          type: 'deposit_confirmed',
          title: '‚úÖ ƒê√É C·ªåC TH√ÄNH C√îNG',
          message: `B·∫°n ƒë√£ thanh to√°n c·ªçc ${(amount || booking.depositAmount).toLocaleString()}ƒë th√†nh c√¥ng cho b√†n ${booking.table}. ƒê·∫∑t b√†n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n!`,
          bookingId: booking._id,
          isRead: false
        });
        
        await customerNotification.save();
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o "ƒê√É C·ªåC TH√ÄNH C√îNG" cho kh√°ch h√†ng');
      } catch (notificationError) {
        console.error('L·ªói g·ª≠i th√¥ng b√°o cho kh√°ch h√†ng:', notificationError);
      }
    }

    // G·ª≠i th√¥ng b√°o cho admin v·ªÅ thanh to√°n th·ªß c√¥ng
    try {
      const Employee = require('../models/Employee');
      const admins = await Employee.find({ role: 'admin' });
      
      for (const admin of admins) {
        const notification = new Notification({
          user: admin._id,
          type: 'manual_payment_confirmed',
          title: 'üí∞ NH√ÇN VI√äN X√ÅC NH·∫¨N THANH TO√ÅN TH·ª¶ C√îNG',
          message: `Nh√¢n vi√™n ƒë√£ x√°c nh·∫≠n thanh to√°n ${(amount || booking.depositAmount).toLocaleString()}ƒë cho b√†n ${booking.table}.\nBooking ID: ${bookingId}`,
          bookingId: booking._id,
          isRead: false
        });
        
        await notification.save();
      }
      
      console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o thanh to√°n th·ªß c√¥ng cho ${admins.length} admin`);
    } catch (notificationError) {
      console.error('L·ªói g·ª≠i th√¥ng b√°o cho admin:', notificationError);
    }

    // G·ª≠i th√¥ng b√°o Socket.IO real-time cho webadmin
    try {
      const io = req.app.get('io');
      if (io) {
        io.to('employees').emit('manual_payment_confirmed', {
          bookingId: booking._id,
          tableId: booking.table,
          tableName: `B√†n ${booking.table}`,
          customerName: booking.customerInfo?.fullName || 'N/A',
          amount: amount || booking.depositAmount,
          transactionType: transactionType,
          message: `Nh√¢n vi√™n ƒë√£ x√°c nh·∫≠n thanh to√°n ${(amount || booking.depositAmount).toLocaleString()}ƒë cho b√†n ${booking.table}`,
          timestamp: new Date()
        });
        
        console.log('üì¢ ƒê√£ g·ª≠i th√¥ng b√°o Socket.IO cho webadmin v·ªÅ thanh to√°n th·ªß c√¥ng');
      }
    } catch (socketError) {
      console.error('L·ªói g·ª≠i th√¥ng b√°o Socket.IO:', socketError);
    }

    res.json({
      success: true,
      message: '‚úÖ X√ÅC NH·∫¨N THANH TO√ÅN TH·ª¶ C√îNG TH√ÄNH C√îNG',
      data: {
        transactionId: transaction._id,
        status: 'completed',
        bookingId: bookingId,
        amount: amount || booking.depositAmount
      }
    });
  } catch (error) {
    console.error('Error confirming manual payment:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng' 
    });
  }
});

// API ƒë·ªÉ admin x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng (ch·ªâ d√†nh cho admin th·∫≠t)
router.post('/confirm-payment', async (req, res) => {
  try {
    const { bookingId, amount, transactionType = 'deposit' } = req.body;

    console.log('üîß Admin x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng:', { bookingId, amount, transactionType });

    if (!bookingId || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin booking ho·∫∑c s·ªë ti·ªÅn'
      });
    }

    // T√¨m booking
    const booking = await Booking.findById(bookingId);
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y booking'
      });
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ giao d·ªãch thanh to√°n th√†nh c√¥ng ch∆∞a
    const existingTransaction = await TransactionHistory.findOne({
      bookingId: bookingId,
      transactionType: transactionType,
      status: 'completed',
      amount: amount
    });

    if (existingTransaction) {
      return res.json({
        success: true,
        message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n tr∆∞·ªõc ƒë√≥',
        data: {
          transactionId: existingTransaction._id,
          status: 'already_confirmed'
        }
      });
    }

    // T·∫°o giao d·ªãch thanh to√°n th√†nh c√¥ng
    const transaction = new TransactionHistory({
      bookingId: booking._id,
      tableId: booking.table,
      tableName: `B√†n ${booking.table}`,
      customerId: booking.customer,
      customerInfo: booking.customerInfo,
      transactionType: transactionType,
      amount: amount,
      paymentMethod: 'qr_code',
      status: 'completed',
      bankInfo: {
        accountNumber: '2246811357',
        accountName: 'DANG GIA HY',
        bankName: 'Techcombank',
        bankCode: '970407'
      },
      transactionId: 'TXN_' + Date.now(),
      paidAt: new Date(),
      confirmedAt: new Date(),
      processedBy: 'admin',
      processedByName: 'Admin',
      notes: `Thanh to√°n ${transactionType === 'deposit' ? 'c·ªçc' : 'ƒë∆°n h√†ng'} b√†n ${booking.table} - X√°c nh·∫≠n th·ªß c√¥ng`
    });

    await transaction.save();
    console.log('‚úÖ ƒê√£ t·∫°o giao d·ªãch thanh to√°n th√†nh c√¥ng:', transaction._id);

    // G·ª≠i th√¥ng b√°o cho admin khi c√≥ c·ªçc th√†nh c√¥ng
    if (transactionType === 'deposit') {
      try {
        // T·∫°o th√¥ng b√°o cho admin
        const adminNotification = new Notification({
          user: null, // null = th√¥ng b√°o cho admin
          type: 'booking_deposit',
          title: 'üí∞ KH√ÅCH H√ÄNG ƒê√É C·ªåC B√ÄN',
          message: `Kh√°ch h√†ng ${booking.customerInfo?.name || 'N/A'} ƒë√£ c·ªçc ${amount.toLocaleString()}ƒë cho b√†n ${booking.table}. Vui l√≤ng x√°c nh·∫≠n!`,
          bookingId: booking._id,
          tableId: booking.table,
          customerId: booking.customer,
          isRead: false,
          priority: 'high'
        });
        
        await adminNotification.save();
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o c·ªçc b√†n cho admin');
        
        // G·ª≠i th√¥ng b√°o real-time qua Socket.IO
        const io = req.app.get('io');
        if (io) {
          io.to('admins').emit('new_notification', {
            id: adminNotification._id,
            type: 'booking_deposit',
            title: adminNotification.title,
            message: adminNotification.message,
            bookingId: booking._id,
            tableId: booking.table,
            customerId: booking.customer,
            timestamp: new Date(),
            priority: 'high'
          });
          console.log('üì° ƒê√£ g·ª≠i th√¥ng b√°o real-time cho admin');
        }
      } catch (notificationError) {
        console.error('L·ªói g·ª≠i th√¥ng b√°o cho admin:', notificationError);
      }
    } else {
      console.log('‚úÖ ƒê√£ l∆∞u giao d·ªãch thanh to√°n, ch·ªù admin x√°c nh·∫≠n');
    }

    // G·ª≠i th√¥ng b√°o cho kh√°ch h√†ng khi thanh to√°n c·ªçc th√†nh c√¥ng
    if (transactionType === 'deposit' && booking.customer) {
      try {
        const customerNotification = new Notification({
          user: booking.customer,
          type: 'deposit_confirmed',
          title: '‚úÖ ƒê√É C·ªåC TH√ÄNH C√îNG, ƒêANG ƒê·ª¢I QU√ÅN X√ÅC NH·∫¨N',
          message: `B·∫°n ƒë√£ thanh to√°n c·ªçc ${amount.toLocaleString()}ƒë th√†nh c√¥ng cho b√†n ${booking.table}. Qu√°n s·∫Ω x√°c nh·∫≠n trong v√†i ph√∫t.`,
          bookingId: booking._id,
          isRead: false
        });
        
        await customerNotification.save();
        console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o "ƒê√É C·ªåC TH√ÄNH C√îNG" cho kh√°ch h√†ng');
      } catch (notificationError) {
        console.error('L·ªói g·ª≠i th√¥ng b√°o cho kh√°ch h√†ng:', notificationError);
      }
    }

    // KH√îNG g·ª≠i th√¥ng b√°o Socket.IO cho webadmin ·ªü ƒë√¢y
    // Th√¥ng b√°o s·∫Ω ƒë∆∞·ª£c g·ª≠i khi admin th·ª±c s·ª± x√°c nh·∫≠n c·ªçc
    console.log('‚úÖ ƒê√£ l∆∞u giao d·ªãch, ch·ªù admin x√°c nh·∫≠n ƒë·ªÉ g·ª≠i th√¥ng b√°o webadmin');

    res.json({
      success: true,
      message: '‚úÖ TH√ÄNH C√îNG - ƒê∆°n c·ªçc b√†n ƒëang ƒë·ª£i admin ph√™ duy·ªát',
      data: {
        transactionId: transaction._id,
        status: 'completed',
        bookingId: bookingId,
        amount: amount
      }
    });
  } catch (error) {
    console.error('Error confirming payment:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi x√°c nh·∫≠n thanh to√°n' 
    });
  }
});

// L·∫•y l·ªãch s·ª≠ giao d·ªãch
router.get('/history', async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 20, 
      type, 
      status, 
      startDate, 
      endDate,
      tableId 
    } = req.query;

    const skip = (page - 1) * limit;
    const query = {};

    // Filter theo lo·∫°i giao d·ªãch
    if (type) {
      query.transactionType = type;
    }

    // Filter theo tr·∫°ng th√°i
    if (status) {
      query.status = status;
    }

    // Filter theo b√†n
    if (tableId) {
      query.tableId = tableId;
    }

    // Filter theo ng√†y
    if (startDate || endDate) {
      query.createdAt = {};
      if (startDate) {
        query.createdAt.$gte = new Date(startDate);
      }
      if (endDate) {
        query.createdAt.$lte = new Date(endDate);
      }
    }

    const transactions = await TransactionHistory.find(query)
      .populate('bookingId', 'bookingDate bookingTime numberOfGuests')
      .populate('customerId', 'fullName phone email')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await TransactionHistory.countDocuments(query);

    // Th·ªëng k√™
    const stats = await TransactionHistory.aggregate([
      { $match: query },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$amount' },
          totalTransactions: { $sum: 1 },
          completedTransactions: {
            $sum: { $cond: [{ $eq: ['$status', 'completed'] }, 1, 0] }
          },
          completedAmount: {
            $sum: { $cond: [{ $eq: ['$status', 'completed'] }, '$amount', 0] }
          }
        }
      }
    ]);

    res.json({
      success: true,
      data: {
        transactions,
        pagination: {
          current: parseInt(page),
          pages: Math.ceil(total / limit),
          total
        },
        stats: stats[0] || {
          totalAmount: 0,
          totalTransactions: 0,
          completedTransactions: 0,
          completedAmount: 0
        }
      }
    });
  } catch (error) {
    console.error('Error fetching transaction history:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch' 
    });
  }
});

// API x√°c nh·∫≠n thanh to√°n QR code
router.post('/confirm-qr-payment', async (req, res) => {
  try {
    const { qrData, amount, description } = req.body;
    
    console.log('üì± QR Payment confirmation request:', { qrData, amount, description });
    
    if (!qrData || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin QR code ho·∫∑c s·ªë ti·ªÅn'
      });
    }

    // T·∫°o transaction history cho QR payment
    const transaction = new TransactionHistory({
      transactionType: 'deposit',
      amount: parseInt(amount),
      paymentMethod: 'qr_code',
      status: 'completed',
      transactionId: 'QR_' + Date.now(),
      paidAt: new Date(),
      confirmedAt: new Date(),
      notes: `Thanh to√°n QR code: ${description || 'QR Payment'}`,
      qrData: qrData,
      // Th√™m c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
      tableId: new mongoose.Types.ObjectId(),
      tableName: 'QR Payment',
      bookingId: new mongoose.Types.ObjectId(),
      customerId: new mongoose.Types.ObjectId(),
      customerInfo: {
        fullName: 'QR Payment Customer',
        phone: 'QR_PAYMENT',
        email: 'qr@payment.com'
      }
    });

    await transaction.save();
    console.log('‚úÖ QR Payment transaction created:', transaction._id);

    // G·ª≠i th√¥ng b√°o cho admin v·ªÅ thanh to√°n QR code
    try {
      const Employee = require('../models/Employee');
      const admins = await Employee.find({ role: 'admin' });
      
      for (const admin of admins) {
        const notification = new Notification({
          user: admin._id,
          type: 'qr_payment_confirmed',
          title: 'üí∞ THANH TO√ÅN QR CODE TH√ÄNH C√îNG',
          message: `Nh√¢n vi√™n ƒë√£ qu√©t QR code v√† thanh to√°n ${amount.toLocaleString()}ƒë.\nM√¥ t·∫£: ${description || 'QR Payment'}\nQR Data: ${qrData.substring(0, 50)}...`,
          isRead: false
        });
        
        await notification.save();
      }
      
      console.log(`‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o QR payment cho ${admins.length} admin`);
    } catch (notificationError) {
      console.error('L·ªói g·ª≠i th√¥ng b√°o QR payment:', notificationError);
    }

    // G·ª≠i th√¥ng b√°o Socket.IO real-time cho webadmin
    try {
      const io = req.app.get('io');
      if (io) {
        io.to('employees').emit('qr_payment_confirmed', {
          amount: amount,
          description: description || 'QR Payment',
          qrData: qrData.substring(0, 50) + '...',
          message: `Nh√¢n vi√™n ƒë√£ qu√©t QR code v√† thanh to√°n ${amount.toLocaleString()}ƒë`,
          timestamp: new Date()
        });
        
        console.log('üì¢ ƒê√£ g·ª≠i th√¥ng b√°o Socket.IO cho webadmin v·ªÅ thanh to√°n QR code');
      }
    } catch (socketError) {
      console.error('L·ªói g·ª≠i th√¥ng b√°o Socket.IO:', socketError);
    }

    res.json({
      success: true,
      message: 'X√°c nh·∫≠n thanh to√°n QR code th√†nh c√¥ng',
      data: {
        transactionId: transaction._id,
        amount: amount,
        qrData: qrData
      }
    });

  } catch (error) {
    console.error('‚ùå Error confirming QR payment:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói x√°c nh·∫≠n thanh to√°n QR code',
      error: error.message
    });
  }
});


module.exports = router;