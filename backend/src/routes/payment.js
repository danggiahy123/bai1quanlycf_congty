const express = require('express');
const TransactionHistory = require('../models/TransactionHistory');
const Booking = require('../models/Booking');
const Table = require('../models/Table');
const Notification = require('../models/Notification');

const router = express.Router();

// L·∫•y danh s√°ch ng√¢n h√†ng
router.get('/banks', async (req, res) => {
  try {
    // Danh s√°ch ng√¢n h√†ng Vi·ªát Nam
    const banks = [
      {
        id: 1,
        name: 'Ng√¢n h√†ng TMCP K·ªπ th∆∞∆°ng Vi·ªát Nam',
        code: 'TCB',
        bin: '970407',
        shortName: 'Techcombank',
        logo: 'https://img.vietqr.io/2021/TCB.png',
        transferSupported: 1,
        lookupSupported: 1
      },
      {
        id: 2,
        name: 'Ng√¢n h√†ng TMCP √Å Ch√¢u',
        code: 'ACB',
        bin: '970416',
        shortName: 'ACB',
        logo: 'https://img.vietqr.io/2021/ACB.png',
        transferSupported: 1,
        lookupSupported: 1
      },
      {
        id: 3,
        name: 'Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam',
        code: 'BID',
        bin: '970418',
        shortName: 'BIDV',
        logo: 'https://img.vietqr.io/2021/BID.png',
        transferSupported: 1,
        lookupSupported: 1
      }
    ];

    res.json({
      success: true,
      data: banks
    });
  } catch (error) {
    console.error('Error fetching banks:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y danh s√°ch ng√¢n h√†ng' 
    });
  }
});

// T·∫°o QR code thanh to√°n
router.post('/generate-qr', async (req, res) => {
  try {
    const { accountNumber, accountName, bankCode, amount, description } = req.body;

    if (!accountNumber || !accountName || !bankCode || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc'
      });
    }

    // T·∫°o QR code URL (s·ª≠ d·ª•ng VietQR API)
    const qrCodeUrl = `https://img.vietqr.io/image/${bankCode}-${accountNumber}-compact2.png?amount=${amount}&addInfo=${encodeURIComponent(description)}`;

    res.json({
      success: true,
      data: {
        qrCode: qrCodeUrl,
        accountNumber,
        accountName,
        bankCode,
        amount,
        description
      }
    });
  } catch (error) {
    console.error('Error generating QR code:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi t·∫°o QR code' 
    });
  }
});

// Ki·ªÉm tra thanh to√°n t·ª± ƒë·ªông (simulate)
router.post('/check-payment', async (req, res) => {
  try {
    const { bookingId, amount, transactionType = 'deposit' } = req.body;

    console.log('üîç Ki·ªÉm tra thanh to√°n:', { bookingId, amount, transactionType });

    if (!bookingId || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin booking ho·∫∑c s·ªë ti·ªÅn'
      });
    }

    // T√¨m booking
    let booking = null;
    try {
      booking = await Booking.findById(bookingId);
    } catch (error) {
      console.log('Booking kh√¥ng t·ªìn t·∫°i, ti·∫øp t·ª•c demo mode');
    }

    // Ki·ªÉm tra xem ƒë√£ c√≥ giao d·ªãch thanh to√°n th√†nh c√¥ng ch∆∞a
    try {
      console.log('üîç T√¨m ki·∫øm giao d·ªãch v·ªõi:', { bookingId, transactionType, amount });
      
      // T√¨m t·∫•t c·∫£ giao d·ªãch v·ªõi bookingId n√†y ƒë·ªÉ debug
      const allTransactions = await TransactionHistory.find({
        bookingId: bookingId
      });
      console.log('üîç T·∫•t c·∫£ giao d·ªãch v·ªõi bookingId:', allTransactions.length);
      
      // T√¨m giao d·ªãch ch√≠nh x√°c v·ªõi bookingId, transactionType, status v√† amount
      const existingTransaction = await TransactionHistory.findOne({
        bookingId: bookingId,
        transactionType: transactionType,
        status: 'completed',
        amount: amount
      });

      console.log('üîç K·∫øt qu·∫£ t√¨m ki·∫øm:', existingTransaction ? 'T√¨m th·∫•y' : 'Kh√¥ng t√¨m th·∫•y');
      
      // N·∫øu kh√¥ng t√¨m th·∫•y giao d·ªãch ch√≠nh x√°c, tr·∫£ v·ªÅ false
      if (!existingTransaction) {
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y giao d·ªãch thanh to√°n th√†nh c√¥ng');
        return res.json({
          success: false,
          message: 'Ch∆∞a ph√°t hi·ªán thanh to√°n',
          data: {
            status: 'pending',
            message: 'CH∆ØA C√ì THANH TO√ÅN'
          }
        });
      }

      // N·∫øu t√¨m th·∫•y giao d·ªãch
      console.log('‚úÖ ƒê√£ t√¨m th·∫•y giao d·ªãch thanh to√°n th√†nh c√¥ng:', existingTransaction._id);
      return res.json({
        success: true,
        message: 'Thanh to√°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n',
        data: {
          status: 'completed',
          message: 'ƒê√É NH·∫¨N TH·∫§Y THANH TO√ÅN',
          transactionId: existingTransaction._id
        }
      });
    } catch (error) {
      console.log('L·ªói ki·ªÉm tra giao d·ªãch:', error.message);
      return res.json({
        success: false,
        message: 'L·ªói khi ki·ªÉm tra thanh to√°n',
        data: {
          status: 'error',
          message: 'L·ªñI KI·ªÇM TRA'
        }
      });
    }

  } catch (error) {
    console.error('Error checking payment:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi ki·ªÉm tra thanh to√°n' 
    });
  }
});

// API ƒë·ªÉ admin x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng (simulate vi·ªác nh·∫≠n ti·ªÅn)
router.post('/confirm-payment', async (req, res) => {
  try {
    const { bookingId, amount, transactionType = 'deposit' } = req.body;

    console.log('üîß Admin x√°c nh·∫≠n thanh to√°n th·ªß c√¥ng:', { bookingId, amount, transactionType });

    if (!bookingId || !amount) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin booking ho·∫∑c s·ªë ti·ªÅn'
      });
    }

    // T√¨m booking
    const booking = await Booking.findById(bookingId);
    if (!booking) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y booking'
      });
    }

    // T·∫°o giao d·ªãch thanh to√°n th√†nh c√¥ng
    const transaction = new TransactionHistory({
      bookingId: booking._id,
      tableId: booking.table,
      tableName: `B√†n ${booking.table}`,
      customerId: booking.customer,
      customerInfo: booking.customerInfo,
      transactionType: transactionType,
      amount: amount,
      paymentMethod: 'qr_code',
      status: 'completed',
      bankInfo: {
        accountNumber: '2246811357',
        accountName: 'DANG GIA HY',
        bankName: 'Techcombank',
        bankCode: '970407'
      },
      transactionId: 'TXN_' + Date.now(),
      paidAt: new Date(),
      confirmedAt: new Date(),
      processedBy: 'admin',
      processedByName: 'Admin',
      notes: `Thanh to√°n ${transactionType === 'deposit' ? 'c·ªçc' : 'ƒë∆°n h√†ng'} b√†n ${booking.table} - X√°c nh·∫≠n th·ªß c√¥ng`
    });

    await transaction.save();
    console.log('‚úÖ ƒê√£ t·∫°o giao d·ªãch thanh to√°n th√†nh c√¥ng:', transaction._id);

    res.json({
      success: true,
      message: 'ƒê√£ x√°c nh·∫≠n thanh to√°n th√†nh c√¥ng',
      data: {
        transactionId: transaction._id,
        status: 'completed'
      }
    });
  } catch (error) {
    console.error('Error confirming payment:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi x√°c nh·∫≠n thanh to√°n' 
    });
  }
});

// L·∫•y l·ªãch s·ª≠ giao d·ªãch
router.get('/history', async (req, res) => {
  try {
    const { 
      page = 1, 
      limit = 20, 
      type, 
      status, 
      startDate, 
      endDate,
      tableId 
    } = req.query;

    const skip = (page - 1) * limit;
    const query = {};

    // Filter theo lo·∫°i giao d·ªãch
    if (type) {
      query.transactionType = type;
    }

    // Filter theo tr·∫°ng th√°i
    if (status) {
      query.status = status;
    }

    // Filter theo b√†n
    if (tableId) {
      query.tableId = tableId;
    }

    // Filter theo ng√†y
    if (startDate || endDate) {
      query.createdAt = {};
      if (startDate) {
        query.createdAt.$gte = new Date(startDate);
      }
      if (endDate) {
        query.createdAt.$lte = new Date(endDate);
      }
    }

    const transactions = await TransactionHistory.find(query)
      .populate('bookingId', 'bookingDate bookingTime numberOfGuests')
      .populate('customerId', 'fullName phone email')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await TransactionHistory.countDocuments(query);

    // Th·ªëng k√™
    const stats = await TransactionHistory.aggregate([
      { $match: query },
      {
        $group: {
          _id: null,
          totalAmount: { $sum: '$amount' },
          totalTransactions: { $sum: 1 },
          completedTransactions: {
            $sum: { $cond: [{ $eq: ['$status', 'completed'] }, 1, 0] }
          },
          completedAmount: {
            $sum: { $cond: [{ $eq: ['$status', 'completed'] }, '$amount', 0] }
          }
        }
      }
    ]);

    res.json({
      success: true,
      data: {
        transactions,
        pagination: {
          current: parseInt(page),
          pages: Math.ceil(total / limit),
          total
        },
        stats: stats[0] || {
          totalAmount: 0,
          totalTransactions: 0,
          completedTransactions: 0,
          completedAmount: 0
        }
      }
    });
  } catch (error) {
    console.error('Error fetching transaction history:', error);
    res.status(500).json({ 
      success: false, 
      message: 'L·ªói khi l·∫•y l·ªãch s·ª≠ giao d·ªãch' 
    });
  }
});

module.exports = router;