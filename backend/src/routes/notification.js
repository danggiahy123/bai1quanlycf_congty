const express = require('express');
const jwt = require('jsonwebtoken');
const mongoose = require('mongoose');
const Notification = require('../models/Notification');
const Booking = require('../models/Booking');
const router = express.Router();

// Middleware ƒë·ªÉ x√°c th·ª±c token
const authenticateToken = async (req, res, next) => {
  try {
    const token = req.headers.authorization?.replace('Bearer ', '');
    if (!token) {
      return res.status(401).json({ message: 'Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p' });
    }

    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'your-secret-key');
    req.user = decoded;
    next();
  } catch (error) {
    return res.status(401).json({ message: 'Token kh√¥ng h·ª£p l·ªá' });
  }
};

// L·∫•y danh s√°ch th√¥ng b√°o c·ªßa user
router.get('/', authenticateToken, async (req, res) => {
  try {
    const { page = 1, limit = 20 } = req.query;
    const skip = (page - 1) * limit;

    console.log('üîç Debug notification API:');
    console.log('User ID from token:', req.user.id);
    console.log('User ID type:', typeof req.user.id);
    
    const notifications = await Notification.find({ user: req.user.id })
      .populate('bookingId', 'bookingDate bookingTime table totalAmount status')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));
      
    console.log('Found notifications:', notifications.length);

    const total = await Notification.countDocuments({ user: req.user.id });
    const unreadCount = await Notification.countDocuments({ 
      user: req.user.id, 
      isRead: false 
    });

    res.json({
      notifications,
      pagination: {
        current: parseInt(page),
        pages: Math.ceil(total / limit),
        total
      },
      unreadCount
    });
  } catch (error) {
    console.error('L·ªói l·∫•y th√¥ng b√°o:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc
router.post('/:id/read', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const notification = await Notification.findOneAndUpdate(
      { _id: id, user: req.user.id },
      { isRead: true, readAt: new Date() },
      { new: true }
    );

    if (!notification) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' });
    }

    res.json({ message: 'ƒê√£ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc' });
  } catch (error) {
    console.error('L·ªói ƒë√°nh d·∫•u th√¥ng b√°o:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// ƒê√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc
router.put('/read-all', authenticateToken, async (req, res) => {
  try {
    await Notification.updateMany(
      { user: req.user.id, isRead: false },
      { isRead: true, readAt: new Date() }
    );

    res.json({ message: 'ƒê√£ ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o ƒë√£ ƒë·ªçc' });
  } catch (error) {
    console.error('L·ªói ƒë√°nh d·∫•u t·∫•t c·∫£ th√¥ng b√°o:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// X√≥a th√¥ng b√°o
router.delete('/:id', authenticateToken, async (req, res) => {
  try {
    const { id } = req.params;

    const notification = await Notification.findOneAndDelete({
      _id: id,
      user: req.user.id
    });

    if (!notification) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o' });
    }

    res.json({ message: 'ƒê√£ x√≥a th√¥ng b√°o' });
  } catch (error) {
    console.error('L·ªói x√≥a th√¥ng b√°o:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// T·∫°o th√¥ng b√°o m·ªõi (cho admin)
router.post('/', async (req, res) => {
  try {
    const { user, type, title, message, bookingId } = req.body;

    const notification = new Notification({
      user,
      type,
      title,
      message,
      bookingId
    });

    await notification.save();

    res.status(201).json({ message: 'Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c t·∫°o', notification });
  } catch (error) {
    console.error('L·ªói t·∫°o th√¥ng b√°o:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// L·∫•y th√¥ng b√°o cho kh√°ch h√†ng
router.get('/customer', authenticateToken, async (req, res) => {
  try {
    const { page = 1, limit = 20 } = req.query;
    const skip = (page - 1) * limit;

    console.log('üîç Debug customer notification API:');
    console.log('User ID from token:', req.user.id);
    
    const notifications = await Notification.find({ user: req.user.id })
      .populate('bookingId', 'table numberOfGuests bookingDate bookingTime totalAmount status')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit));

    const total = await Notification.countDocuments({ user: req.user.id });
    const unreadCount = await Notification.countDocuments({ 
      user: req.user.id, 
      isRead: false 
    });

    res.json({
      notifications,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total,
      unreadCount
    });
  } catch (error) {
    console.error('L·ªói l·∫•y th√¥ng b√°o kh√°ch h√†ng:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

// L·∫•y th√¥ng b√°o cho nh√¢n vi√™n (kh√¥ng c·∫ßn x√°c th·ª±c customer)
router.get('/employee', async (req, res) => {
  try {
    const { page = 1, limit = 20 } = req.query;
    const skip = (page - 1) * limit;

    // L·∫•y t·∫•t c·∫£ th√¥ng b√°o (cho nh√¢n vi√™n)
    const notifications = await Notification.find({})
      .populate('user', 'fullName username')
      .populate('bookingId', 'table numberOfGuests bookingDate bookingTime totalAmount status')
      .sort({ createdAt: -1 })
      .limit(limit * 1)
      .skip(skip);

    const total = await Notification.countDocuments({});
    const unreadCount = await Notification.countDocuments({ isRead: false });

    res.json({
      notifications,
      totalPages: Math.ceil(total / limit),
      currentPage: page,
      total,
      unreadCount
    });
  } catch (error) {
    console.error('L·ªói l·∫•y th√¥ng b√°o nh√¢n vi√™n:', error);
    res.status(500).json({ message: 'L·ªói server' });
  }
});

module.exports = router;
