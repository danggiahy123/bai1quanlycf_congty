const axios = require('axios');

const API_URL = 'http://localhost:5000';

async function testReturnTable() {
  try {
    console.log('üß™ B·∫Øt ƒë·∫ßu test t√≠nh nƒÉng tr·∫£ b√†n...\n');

    // 1. Ki·ªÉm tra b√†n occupied
    console.log('1Ô∏è‚É£ Ki·ªÉm tra b√†n ƒëang occupied...');
    const tablesResponse = await axios.get(`${API_URL}/api/tables`);
    const occupiedTables = tablesResponse.data.filter(table => table.status === 'occupied');
    
    if (occupiedTables.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ b√†n n√†o ƒëang occupied ƒë·ªÉ test tr·∫£ b√†n');
      console.log('üí° H√£y t·∫°o booking tr∆∞·ªõc ƒë·ªÉ test');
      return;
    }

    const testTable = occupiedTables[0];
    console.log(`‚úÖ T√¨m th·∫•y b√†n ${testTable.name} (ID: ${testTable._id}) ƒëang occupied`);

    // 2. Test API tr·∫£ b√†n
    console.log(`\n2Ô∏è‚É£ Test tr·∫£ b√†n ${testTable.name}...`);
    try {
      const returnResponse = await axios.post(`${API_URL}/api/tables/${testTable._id}/return`, {
        performedBy: 'admin',
        performedByName: 'Admin'
      });
      
      if (returnResponse.data.success) {
        console.log('‚úÖ Tr·∫£ b√†n th√†nh c√¥ng!');
        console.log('üìä D·ªØ li·ªáu tr·∫£ v·ªÅ:', {
          message: returnResponse.data.message,
          table: returnResponse.data.table,
          deletedOrder: returnResponse.data.deletedOrder,
          cancelledBooking: returnResponse.data.cancelledBooking
        });
      }
    } catch (returnError) {
      console.log('‚ùå L·ªói tr·∫£ b√†n:', returnError.response?.data?.error || returnError.message);
    }

    // 3. Ki·ªÉm tra tr·∫°ng th√°i b√†n sau khi tr·∫£
    console.log('\n3Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i b√†n sau khi tr·∫£...');
    const updatedTablesResponse = await axios.get(`${API_URL}/api/tables`);
    const updatedTable = updatedTablesResponse.data.find(table => table._id === testTable._id);
    console.log(`üìã Tr·∫°ng th√°i b√†n ${updatedTable.name}: ${updatedTable.status}`);

    // 4. Ki·ªÉm tra l·ªãch s·ª≠ b√†n
    console.log('\n4Ô∏è‚É£ Ki·ªÉm tra l·ªãch s·ª≠ b√†n...');
    try {
      const historyResponse = await axios.get(`${API_URL}/api/table-history`);
      const recentHistory = historyResponse.data
        .filter(h => h.tableId === testTable._id)
        .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
        .slice(0, 3);
      
      console.log('üìú L·ªãch s·ª≠ g·∫ßn ƒë√¢y:');
      recentHistory.forEach(h => {
        console.log(`  - ${h.action}: ${h.note} (${new Date(h.createdAt).toLocaleString()})`);
      });
    } catch (historyError) {
      console.log('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ b√†n:', historyError.message);
    }

    console.log('\nüéâ Test ho√†n th√†nh!');

  } catch (error) {
    console.error('‚ùå L·ªói trong qu√° tr√¨nh test:', error.message);
  }
}

// Ch·∫°y test
testReturnTable();
