const mongoose = require('mongoose');
require('dotenv').config();

// Import models
const Ingredient = require('../models/Ingredient');
const InventoryTransaction = require('../models/InventoryTransaction');
const StockCheck = require('../models/StockCheck');

const MONGO_URI = process.env.MONGO_URI || 'mongodb://localhost:27017/cafe_app';

async function createFrogScenario2() {
  try {
    await mongoose.connect(MONGO_URI);
    console.log('Connected to MongoDB');

    // X√≥a d·ªØ li·ªáu c≈©
    await Ingredient.deleteMany({ name: '·∫æch' });
    await InventoryTransaction.deleteMany({});
    await StockCheck.deleteMany({});

    // T·∫°o nguy√™n li·ªáu ·∫øch
    const frog = new Ingredient({
      name: '·∫æch',
      category: 'food',
      unit: 'con',
      currentStock: 15, // H√¥m nay c√≤n 15 con (th·ª© 6)
      minStockLevel: 5,
      maxStockLevel: 30,
      unitPrice: 15000, // 15k/con
      supplier: 'Nh√† cung c·∫•p ·∫øch t∆∞∆°i',
      notes: '·∫æch t∆∞∆°i s·ªëng',
      lastImportDate: new Date('2024-12-27T08:00:00Z'), // Th·ª© 6
      lastImportQuantity: 5,
      lastImportPrice: 15000,
      isActive: true
    });

    await frog.save();
    console.log('‚úÖ T·∫°o nguy√™n li·ªáu ·∫øch th√†nh c√¥ng');

    // T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 2 (20 con)
    const importTransaction1 = new InventoryTransaction({
      ingredient: frog._id,
      transactionType: 'import',
      quantity: 20,
      unitPrice: 15000,
      totalAmount: 300000,
      previousStock: 0,
      newStock: 20,
      reference: 'IMPORT_2024-12-23',
      referenceId: new mongoose.Types.ObjectId(),
      reason: 'import',
      notes: 'Nh·∫≠p h√†ng th·ª© 2 - 20 con ·∫øch',
      performedBy: new mongoose.Types.ObjectId(),
      performedByName: 'Admin',
      department: 'warehouse',
      createdAt: new Date('2024-12-23T08:00:00Z') // Th·ª© 2
    });

    await importTransaction1.save();
    console.log('‚úÖ T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 2 (20 con)');

    // T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 6 (5 con)
    const importTransaction2 = new InventoryTransaction({
      ingredient: frog._id,
      transactionType: 'import',
      quantity: 5,
      unitPrice: 15000,
      totalAmount: 75000,
      previousStock: 10,
      newStock: 15,
      reference: 'IMPORT_2024-12-27',
      referenceId: new mongoose.Types.ObjectId(),
      reason: 'import',
      notes: 'Nh·∫≠p h√†ng th·ª© 6 - 5 con ·∫øch',
      performedBy: new mongoose.Types.ObjectId(),
      performedByName: 'Admin',
      department: 'warehouse',
      createdAt: new Date('2024-12-27T08:00:00Z') // Th·ª© 6
    });

    await importTransaction2.save();
    console.log('‚úÖ T·∫°o giao d·ªãch nh·∫≠p h√†ng th·ª© 6 (5 con)');

    // T·∫°o ki·ªÉm kho th·ª© 3 (b√°n 3 con, c√≤n 17 con)
    const stockCheck3 = new StockCheck({
      ingredient: frog._id,
      previousStock: 20,
      newStock: 17,
      difference: -3,
      checkedBy: new mongoose.Types.ObjectId(),
      checkedByName: 'Admin',
      notes: 'Ki·ªÉm kho th·ª© 3 - b√°n 3 con',
      checkDate: new Date('2024-12-24T18:00:00Z'), // Th·ª© 3
      isCompleted: true
    });

    await stockCheck3.save();
    console.log('‚úÖ T·∫°o ki·ªÉm kho th·ª© 3 (b√°n 3 con)');

    // T·∫°o ki·ªÉm kho th·ª© 4 (b√°n 6 con, c√≤n 11 con)
    const stockCheck4 = new StockCheck({
      ingredient: frog._id,
      previousStock: 17,
      newStock: 11,
      difference: -6,
      checkedBy: new mongoose.Types.ObjectId(),
      checkedByName: 'Admin',
      notes: 'Ki·ªÉm kho th·ª© 4 - b√°n 6 con',
      checkDate: new Date('2024-12-25T18:00:00Z'), // Th·ª© 4
      isCompleted: true
    });

    await stockCheck4.save();
    console.log('‚úÖ T·∫°o ki·ªÉm kho th·ª© 4 (b√°n 6 con)');

    // T·∫°o ki·ªÉm kho th·ª© 5 (b√°n 1 con, c√≤n 10 con)
    const stockCheck5 = new StockCheck({
      ingredient: frog._id,
      previousStock: 11,
      newStock: 10,
      difference: -1,
      checkedBy: new mongoose.Types.ObjectId(),
      checkedByName: 'Admin',
      notes: 'Ki·ªÉm kho th·ª© 5 - b√°n 1 con',
      checkDate: new Date('2024-12-26T18:00:00Z'), // Th·ª© 5
      isCompleted: true
    });

    await stockCheck5.save();
    console.log('‚úÖ T·∫°o ki·ªÉm kho th·ª© 5 (b√°n 1 con)');

    console.log('\nüéØ K·ªãch b·∫£n ·∫øch m·ªõi ƒë√£ ƒë∆∞·ª£c t·∫°o:');
    console.log('üìÖ Th·ª© 2: Nh·∫≠p 20 con ·∫øch');
    console.log('üìÖ Th·ª© 3: B√°n 3 con ‚Üí C√≤n 17 con');
    console.log('üìÖ Th·ª© 4: B√°n 6 con ‚Üí C√≤n 11 con');
    console.log('üìÖ Th·ª© 5: B√°n 1 con ‚Üí C√≤n 10 con');
    console.log('üìÖ Th·ª© 6: Nh·∫≠p 5 con ‚Üí C√≤n 15 con (h√¥m nay)');
    console.log('\nüìä B·∫£ng so s√°nh s·∫Ω hi·ªÉn th·ªã:');
    console.log('‚Ä¢ Ng√†y nh·∫≠p g·∫ßn nh·∫•t: 5 con (Th·ª© 6)');
    console.log('‚Ä¢ H√¥m qua: 10 con (Th·ª© 5)');
    console.log('‚Ä¢ H√¥m nay: 15 con (Th·ª© 6)');
    console.log('‚Ä¢ X√†i h√¥m nay: 0 con (15 - 15 = 0, v√¨ nh·∫≠p h√†ng)');
    console.log('‚Ä¢ X√†i t·ª´ l·∫ßn nh·∫≠p tr∆∞·ªõc: 10 con (20 - 10 = 10, t·ª´ th·ª© 2 ƒë·∫øn th·ª© 5)');

  } catch (error) {
    console.error('‚ùå L·ªói t·∫°o k·ªãch b·∫£n ·∫øch:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ Ho√†n th√†nh! H√£y ki·ªÉm tra b·∫£ng so s√°nh trong webadmin.');
  }
}

createFrogScenario2();
